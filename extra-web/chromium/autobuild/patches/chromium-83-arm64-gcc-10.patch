--- chromium-83.0.4103.97/./third_party/zlib/contrib/optimizations/insert_string.h	2020-06-03 13:40:32.000000000 -0500
+++ chromium-83.0.4103.97.new/./third_party/zlib/contrib/optimizations/insert_string.h	2020-06-12 23:19:05.631362914 -0500
@@ -29,14 +29,16 @@
   #if defined(__clang__)
     #undef TARGET_CPU_WITH_CRC
     #define __crc32cw __builtin_arm_crc32cw
+  #else
+    #include <arm_acle.h>
   #endif
 
   #define _cpu_crc32_u32 __crc32cw
 
   #if defined(__aarch64__)
-    #define TARGET_CPU_WITH_CRC __attribute__((target("crc")))
+    #define TARGET_CPU_WITH_CRC __attribute__((target("+crc")))
   #else  // !defined(__aarch64__)
-    #define TARGET_CPU_WITH_CRC __attribute__((target("armv8-a,crc")))
+    #define TARGET_CPU_WITH_CRC __attribute__((target("arch=armv8-a+crc")))
   #endif  // defined(__aarch64__)
 #endif
 // clang-format on
diff -Naur chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctfst-neon.c chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctfst-neon.c
--- chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctfst-neon.c	2020-06-03 13:41:40.000000000 -0500
+++ chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctfst-neon.c	2020-06-12 22:47:19.799387612 -0500
@@ -84,8 +84,8 @@
   bitmap = vorrq_s16(bitmap, row6);
   bitmap = vorrq_s16(bitmap, row7);
 
-  int64_t left_ac_bitmap = vreinterpret_s64_s16(vget_low_s16(bitmap));
-  int64_t right_ac_bitmap = vreinterpret_s64_s16(vget_high_s16(bitmap));
+  int64_t left_ac_bitmap = vgetq_lane_s64(vreinterpretq_s64_s16(bitmap), 0);
+  int64_t right_ac_bitmap = vgetq_lane_s64(vreinterpretq_s64_s16(bitmap), 0);
 
   if (left_ac_bitmap == 0 && right_ac_bitmap == 0) {
     /* All AC coefficients are zero. */
@@ -405,13 +405,13 @@
                                      vqshrn_n_s16(col7, PASS1_BITS + 3));
   /* Clamp to range [0-255]. */
   uint8x16_t cols_01 = vreinterpretq_u8_s8(
-                            vaddq_s8(cols_01_s8, vdupq_n_u8(CENTERJSAMPLE)));
+                            vaddq_s8(cols_01_s8, vreinterpretq_s8_u8(vdupq_n_u8(CENTERJSAMPLE))));
   uint8x16_t cols_45 = vreinterpretq_u8_s8(
-                            vaddq_s8(cols_45_s8, vdupq_n_u8(CENTERJSAMPLE)));
+                            vaddq_s8(cols_45_s8, vreinterpretq_s8_u8(vdupq_n_u8(CENTERJSAMPLE))));
   uint8x16_t cols_23 = vreinterpretq_u8_s8(
-                            vaddq_s8(cols_23_s8, vdupq_n_u8(CENTERJSAMPLE)));
+                            vaddq_s8(cols_23_s8, vreinterpretq_s8_u8(vdupq_n_u8(CENTERJSAMPLE))));
   uint8x16_t cols_67 = vreinterpretq_u8_s8(
-                            vaddq_s8(cols_67_s8, vdupq_n_u8(CENTERJSAMPLE)));
+                            vaddq_s8(cols_67_s8, vreinterpretq_s8_u8(vdupq_n_u8(CENTERJSAMPLE))));
 
   /* Transpose block ready for store. */
   uint32x4x2_t cols_0415 = vzipq_u32(vreinterpretq_u32_u8(cols_01),
diff -Naur chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctint-neon.c chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctint-neon.c
--- chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctint-neon.c	2020-06-03 13:41:40.000000000 -0500
+++ chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctint-neon.c	2020-06-12 22:54:47.758549264 -0500
@@ -214,13 +214,13 @@
   int16x4_t bitmap = vorr_s16(row7, row6);
   bitmap = vorr_s16(bitmap, row5);
   bitmap = vorr_s16(bitmap, row4);
-  int64_t bitmap_rows_4567 = vreinterpret_s64_s16(bitmap);
+  int64_t bitmap_rows_4567 = vget_lane_s64(vreinterpret_s64_s16(bitmap), 0);
 
   if (bitmap_rows_4567 == 0) {
     bitmap = vorr_s16(bitmap, row3);
     bitmap = vorr_s16(bitmap, row2);
     bitmap = vorr_s16(bitmap, row1);
-    int64_t left_ac_bitmap = vreinterpret_s64_s16(bitmap);
+    int64_t left_ac_bitmap = vget_lane_s64(vreinterpret_s64_s16(bitmap), 0);
 
     if (left_ac_bitmap == 0) {
       int16x4_t dcval = vshl_n_s16(vmul_s16(row0, quant_row0), PASS1_BITS);
@@ -266,18 +266,18 @@
   bitmap = vorr_s16(row7, row6);
   bitmap = vorr_s16(bitmap, row5);
   bitmap = vorr_s16(bitmap, row4);
-  bitmap_rows_4567 = vreinterpret_s64_s16(bitmap);
+  bitmap_rows_4567 = vget_lane_s64(vreinterpret_s64_s16(bitmap), 0);
   bitmap = vorr_s16(bitmap, row3);
   bitmap = vorr_s16(bitmap, row2);
   bitmap = vorr_s16(bitmap, row1);
-  int64_t right_ac_bitmap = vreinterpret_s64_s16(bitmap);
+  int64_t right_ac_bitmap = vget_lane_s64(vreinterpret_s64_s16(bitmap), 0);
 
   /* Initialise to non-zero value: defaults to regular second pass. */
   int64_t right_ac_dc_bitmap = 1;
 
   if (right_ac_bitmap == 0) {
     bitmap = vorr_s16(bitmap, row0);
-    right_ac_dc_bitmap = vreinterpret_s64_s16(bitmap);
+    right_ac_dc_bitmap = vget_lane_s64(vreinterpret_s64_s16(bitmap), 0);
 
     if (right_ac_dc_bitmap != 0) {
       int16x4_t dcval = vshl_n_s16(vmul_s16(row0, quant_row0), PASS1_BITS);
@@ -630,10 +630,10 @@
   int8x8_t cols_46_s8 = vqrshrn_n_s16(cols_46_s16, DESCALE_P2 - 16);
   int8x8_t cols_57_s8 = vqrshrn_n_s16(cols_57_s16, DESCALE_P2 - 16);
   /* Clamp to range [0-255]. */
-  uint8x8_t cols_02_u8 = vadd_u8(cols_02_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_13_u8 = vadd_u8(cols_13_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_46_u8 = vadd_u8(cols_46_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_57_u8 = vadd_u8(cols_57_s8, vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_02_u8 = vadd_u8(vreinterpret_u8_s8(cols_02_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_13_u8 = vadd_u8(vreinterpret_u8_s8(cols_13_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_46_u8 = vadd_u8(vreinterpret_u8_s8(cols_46_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_57_u8 = vadd_u8(vreinterpret_u8_s8(cols_57_s8), vdup_n_u8(CENTERJSAMPLE));
 
   /* Transpose 4x8 block and store to memory. */
   /* Zipping adjacent columns together allows us to store 16-bit elements. */
@@ -722,10 +722,10 @@
   int8x8_t cols_46_s8 = vqrshrn_n_s16(cols_46_s16, DESCALE_P2 - 16);
   int8x8_t cols_57_s8 = vqrshrn_n_s16(cols_57_s16, DESCALE_P2 - 16);
   /* Clamp to range [0-255]. */
-  uint8x8_t cols_02_u8 = vadd_u8(cols_02_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_13_u8 = vadd_u8(cols_13_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_46_u8 = vadd_u8(cols_46_s8, vdup_n_u8(CENTERJSAMPLE));
-  uint8x8_t cols_57_u8 = vadd_u8(cols_57_s8, vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_02_u8 = vadd_u8(vreinterpret_u8_s8(cols_02_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_13_u8 = vadd_u8(vreinterpret_u8_s8(cols_13_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_46_u8 = vadd_u8(vreinterpret_u8_s8(cols_46_s8), vdup_n_u8(CENTERJSAMPLE));
+  uint8x8_t cols_57_u8 = vadd_u8(vreinterpret_u8_s8(cols_57_s8), vdup_n_u8(CENTERJSAMPLE));
 
   /* Transpose 4x8 block and store to memory. */
   /* Zipping adjacent columns together allow us to store 16-bit elements. */
diff -Naur chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctred-neon.c chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctred-neon.c
--- chromium-83.0.4103.97/./third_party/libjpeg_turbo/simd/arm/common/jidctred-neon.c	2020-06-03 13:41:40.000000000 -0500
+++ chromium-83.0.4103.97.new/./third_party/libjpeg_turbo/simd/arm/common/jidctred-neon.c	2020-06-12 22:44:45.867679254 -0500
@@ -217,8 +217,8 @@
   bitmap = vorrq_s16(bitmap, row6);
   bitmap = vorrq_s16(bitmap, row7);
 
-  int64_t left_ac_bitmap = vreinterpret_s64_s16(vget_low_s16(bitmap));
-  int64_t right_ac_bitmap = vreinterpret_s64_s16(vget_high_s16(bitmap));
+  int64_t left_ac_bitmap = vgetq_lane_s64(vreinterpretq_s64_s16(bitmap), 0);
+  int64_t right_ac_bitmap = vgetq_lane_s64(vreinterpretq_s64_s16(bitmap), 0);
 
   /* Load constants for IDCT computation. */
   const int16x4x3_t consts = vld1_s16_x3(jsimd_idct_4x4_neon_consts);
@@ -452,7 +452,7 @@
   /* Interleaving store completes the transpose. */
   uint8x8x2_t output_0123 = vzip_u8(vqmovun_s16(output_cols_02),
                                     vqmovun_s16(output_cols_13));
-  uint16x4x2_t output_01_23 = { output_0123.val[0], output_0123.val[1] };
+  uint16x4x2_t output_01_23 = { vreinterpret_u16_u8(output_0123.val[0]), vreinterpret_u16_u8(output_0123.val[1]) };
 
   /* Store 4x4 block to memory. */
   JSAMPROW outptr0 = output_buf[0] + output_col;
