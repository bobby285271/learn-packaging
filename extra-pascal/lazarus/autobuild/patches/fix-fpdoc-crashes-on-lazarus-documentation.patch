Description: fpdoc fails to build the documentation leaving the documentation
 package empty
Author: Mattias Gaertner <nc-gaertnma@netcologne.de>
Bug-Debian: http://bugs.debian.org/858553
Source:
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/lcl/graphics.pp?r1=54518&r2=54517&pathrev=54518&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/docs/xml/lcl/graphics.xml?r1=54518&r2=54517&pathrev=54518&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/docs/xml/lcl/forms.xml?r1=54518&r2=54517&pathrev=54518&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/docs/xml/lcl/extctrls.xml?r1=54518&r2=54517&pathrev=54518&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/lcl/include/lcl_defines.inc?r1=54518&r2=54517&pathrev=54518&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/docs/xml/lcl/graphics.xml?r1=54519&r2=54518&pathrev=54519&root=lazarus&view=patch
 http://svn.freepascal.org/cgi-bin/viewvc.cgi/branches/fixes_1_6/lcl/extctrls.pp?root=lazarus&r1=52280&r2=54527&view=patch
Index: lazarus/docs/xml/lcl/graphics.xml
===================================================================
--- lazarus.orig/docs/xml/lcl/graphics.xml
+++ lazarus/docs/xml/lcl/graphics.xml
@@ -296,9 +296,9 @@ Additionally there are "system colors",
           <var>Font</var>
         </short>
         <descr>
-          <p>New <var>TFont</var> instances are initialized with the values in this structure.</p>
-          <p>About font default values: The default font is chosen by the interfaces depending on the context. </p>
-          <p>For example, there can be a different default font for a button and a groupbox.</p>
+          New <var>TFont</var> instances are initialized with the values in this structure.<br/>
+          About font default values: The default font is chosen by the interfaces depending on the context. <br/>
+          For example, there can be a different default font for a button and a groupbox.<br/>
         </descr>
         <seealso>
           <link id="TFontData"/>
@@ -320,25 +320,25 @@ Additionally there are "system colors",
       <!-- enumeration value Visibility: default -->
       <element name="TTextLayout.tlBottom">
         <short/>
+        <descr/>
       </element>
       <!-- record type Visibility: default -->
       <element name="TTextStyle">
         <short>The <var>Style</var> of the <var>Text</var> to be drawn in a rectangle</short>
-        <descr>
-          <p>The <var>Style</var> of the <var>Text</var> to be drawn in a rectangle</p>
-          <ul>
-            <li>Alignment :  TextRect Only: horizontal alignment</li>
-            <li>Layout    : TextRect Only: vertical alignment</li>
-            <li>SingleLine: boolean;    If WordBreak is false then process #13, #10 as standard chars and perform no Line breaking.</li>
-            <li>Clipping  : boolean;    TextRect Only: Clip Text to passed Rectangle</li>
-            <li>ExpandTabs: boolean;    currently ignored</li>
-            <li>ShowPrefix: boolean;    TextRect Only: Process first single ampersand per line as an underscore and draw double ampersand as a single ampersand</li>
-            <li>Wordbreak : boolean;    TextRect Only: If line of text is too long to fit between left and right boundaries,   try to break into multiple lines between words</li>
-            <li>Opaque    : boolean;    TextRect: Fills background with current Brush</li>
-            <li>Opaque    :             TextOut : Fills background with current foreground color</li>
-            <li>SystemFont: Boolean;    Use the system font instead of Canvas Font</li>
-            <li>RightToLeft: Boolean;   For RightToLeft text reading (Text Direction)</li>
-          </ul>
+        <descr>The <var>Style</var> of the <var>Text</var> to be drawn in a rectangle<br/>
+           <br/>
+            * Alignment :  TextRect Only: horizontal alignment<br/>
+            * Layout    : TextRect Only: vertical alignment<br/>
+            * SingleLine: boolean;    If WordBreak is false then process #13, #10 as standard chars and perform no Line breaking.<br/>
+            * Clipping  : boolean;    TextRect Only: Clip Text to passed Rectangle<br/>
+            * ExpandTabs: boolean;    currently ignored<br/>
+            * ShowPrefix: boolean;    TextRect Only: Process first single ampersand per line as an underscore and draw double ampersand as a single ampersand<br/>
+            * Wordbreak : boolean;    TextRect Only: If line of text is too long to fit between left and right boundaries,   try to break into multiple lines between words<br/>
+            * Opaque    : boolean;    TextRect: Fills background with current Brush<br/>
+            * Opaque    :             TextOut : Fills background with current foreground color<br/>
+            * SystemFont: Boolean;    Use the system font instead of Canvas Font<br/>
+            * RightToLeft: Boolean;   For RightToLeft text reading (Text Direction)<br/>
+          <br/>
         </descr>
       </element>
       <!-- variable Visibility: default -->
@@ -1767,8 +1767,8 @@ Since FPC 2.0 the LCL uses TFPCanvasHelp
         <short>The <var>Font</var>  to be used for drawing <var>Text</var>
         </short>
         <descr>
-          <p>Most of the data about the font are dealt with by the protected procedures GetData and SetData which operate on TFontData</p>
-          <p>Individual properties such as Character Set, colour and size can be accessed in the public area</p>
+          Most of the data about the font are dealt with by the protected procedures GetData and SetData which operate on TFontData<br/>
+          Individual properties such as Character Set, colour and size can be accessed in the public area<br/>
         </descr>
       </element>
       <!-- variable Visibility: private -->
@@ -2108,10 +2108,9 @@ Since FPC 2.0 the LCL uses TFPCanvasHelp
       <!-- constructor Visibility: public -->
       <element name="TFont.Create">
         <descr>
-          <p>
             <var>Create</var> - constructor for 
             <var>TFont</var>: Opens a new instance of the class , calling inherited 
-            <var>Create</var> and sets defaults for character set, colour, size etc</p>
+            <var>Create</var> and sets defaults for character set, colour, size etc
         </descr>
         <short>
           <var>Create</var> - constructor for 
@@ -2137,12 +2136,10 @@ Since FPC 2.0 the LCL uses TFPCanvasHelp
         <short>
           <var>Assign</var> - copies the source settings to itself</short>
         <descr>
-          <p>Method: <var>TFont.Assign</var>
-          </p>
-          <p>
-            <var>Source</var>: another font</p>
-          <p>Returns:  nothing</p>
-          <p>Copies the source settings to itself</p>
+          Method: <var>TFont.Assign</var>
+          <var>Source</var>: another font<br/>
+          Returns:  nothing<br/>
+          Copies the source settings to itself<br/>
         </descr>
         <seealso>
           <link id="#rtl.Classes.TPersistent.Assign"/>
@@ -3598,86 +3595,48 @@ If the file is not of the right format,
       <element name="TPicture">
         <short>
           <var>TPicture</var> is a  
-          
-          
-          
           <var>TGraphic</var>  container, used in place of a  
-          
-          
-          
           <var>TGraphic</var> if the graphic can be of any 
-          
-          
-          
           <var>TGraphic</var> class.</short>
         <descr>
-          <p>
             <var>TPicture</var> is a 
-            
-            
-            
             <var>TGraphic</var> container.  It is used in place of a 
-            
-            
-            
             <var>TGraphic</var> if the graphic can be of any 
-            
-            
-            
-            <var>TGraphic</var> class. </p>
-          <p>It is not a direct descendant of <var>TGraphic</var>, so you will not see <var>TGraphic</var> listed in the <var>Inheritance</var> chart, but it contains a property <var>Graphic</var>, of type <var>TGraphic</var>, so can contain all the properties of a <var>TGraphic</var>
-          </p>
-          <p>Defines many <b>private</b> methods for getting and storing various sorts of images such as bitmaps, pixmaps, icons, PNGs etc</p>
-          <p>It does not itself contain a defined area for displaying the image, but this is supplied by the descendant classes such as BitMap, PixMap, PNG or Icon, which define a <var>Canvas</var> property.</p>
-          <p>
+            <var>TGraphic</var> class. <br/>
+          It is not a direct descendant of <var>TGraphic</var>, so you will not see <var>TGraphic</var> listed in the <var>Inheritance</var> chart, but it contains a property <var>Graphic</var>, of type <var>TGraphic</var>, so can contain all the properties of a <var>TGraphic</var>
+          <br/>
+          Defines many <b>private</b> methods for getting and storing various sorts of images such as bitmaps, pixmaps, icons, PNGs etc<br/>
+          It does not itself contain a defined area for displaying the image, but this is supplied by the descendant classes such as BitMap, PixMap, PNG or Icon, which define a <var>Canvas</var> property.<br/>
             <var>LoadFromFile</var> and 
-            
-            
-            
             <var>SaveToFile</var> are polymorphic. For example, if the 
-            
-            
-            
             <var>TPicture</var> is holding an 
-            
-            
-            
             <var>Icon</var>, you can 
-            
-            
-            
             <var>LoadFromFile</var> a bitmap file, whereas if the class is 
-            
-            
-            
-            <var>TIcon</var> you could only read  .ICO files.</p>
-          <ul>
-            <li>
+            <var>TIcon</var> you could only read  .ICO files.<br/>
+          <br/>
+            * 
               <var>LoadFromFile</var> - Reads a picture from disk. The 
-              
-              
-              
-              <var>TGraphic</var> class created is determined by the file extension of the file. If the file extension is  not recognized an exception is generated.</li>
-            <li>
-              <var>SaveToFile</var> - Writes the picture to disk.</li>
-            <li>
-              <var>LoadFromClipboardFormat</var> - ToDo: Reads the picture from the handle provided in the given clipboard format.  If the format is not supported, an exception is generated.</li>
-            <li>
-              <var>SaveToClipboardFormats</var> - ToDo: Allocates a global handle and writes the picture in its native clipboard format (CF_BITMAP for bitmaps, CF_METAFILE for metafiles, etc.).  Formats will contain the formats written.  Returns the number of clipboard items written to the array pointed to by Formats and Datas or would be written if either Formats or Datas are  nil.</li>
-            <li>
+              <var>TGraphic</var> class created is determined by the file extension of the file. If the file extension is  not recognized an exception is generated.<br/>
+            * 
+              <var>SaveToFile</var> - Writes the picture to disk.<br/>
+            * 
+              <var>LoadFromClipboardFormat</var> - ToDo: Reads the picture from the handle provided in the given clipboard format.  If the format is not supported, an exception is generated.<br/>
+            * 
+              <var>SaveToClipboardFormats</var> - ToDo: Allocates a global handle and writes the picture in its native clipboard format (CF_BITMAP for bitmaps, CF_METAFILE for metafiles, etc.).  Formats will contain the formats written.  Returns the number of clipboard items written to the array pointed to by Formats and Datas or would be written if either Formats or Datas are  nil.<br/>
+            * 
               <var>SupportsClipboardFormat</var> - Returns true if the given clipboard format  is supported by 
               
               
               
               <var>LoadFromClipboardFormat</var>
-            </li>
-            <li>
+            <br/>
+            * 
               <var>Assign</var> - Copies the contents of the given 
               
               
               
-              <var>TPicture</var>.  Used most often in  the implementation of TPicture properties.</li>
-            <li>
+              <var>TPicture</var>.  Used most often in  the implementation of TPicture properties.<br/>
+            * 
               <var>RegisterFileFormat</var> - Register a new 
               
               
@@ -3686,8 +3645,8 @@ If the file is not of the right format,
               
               
               
-              <var>LoadFromFile</var>.</li>
-            <li>
+              <var>LoadFromFile</var>.<br/>
+            * 
               <var>RegisterClipboardFormat</var> - Registers a new 
               
               
@@ -3696,18 +3655,18 @@ If the file is not of the right format,
               
               
               
-              <var>LoadFromClipboardFormat</var>.</li>
-            <li>
+              <var>LoadFromClipboardFormat</var>.<br/>
+            * 
               <var>UnRegisterGraphicClass</var> - Removes all references to the specified 
               
               
               
-              <var>TGraphic</var> class and all its descendants from the file format and clipboard format internal lists.</li>
-            <li>
-              <var>Height</var> - The native, unstretched, height of the picture.</li>
-            <li>
-              <var>Width</var> - The native, unstretched, width of the picture.</li>
-            <li>
+              <var>TGraphic</var> class and all its descendants from the file format and clipboard format internal lists.<br/>
+            * 
+              <var>Height</var> - The native, unstretched, height of the picture.<br/>
+            * 
+              <var>Width</var> - The native, unstretched, width of the picture.<br/>
+            * 
               <var>Graphic</var> - The 
               
               
@@ -3717,30 +3676,30 @@ If the file is not of the right format,
               
               
               <var>TPicture</var>
-            </li>
-            <li>
-              <var>Bitmap</var> - Returns a bitmap.  If the contents is not already a bitmap, the contents are thrown away and a blank bitmap is returned.</li>
-            <li>
-              <var>Pixmap</var> - Returns a pixmap.  If the contents is not already a pixmap, the contents are thrown away and a blank pixmap is returned.</li>
-            <li>
+            <br/>
+            * 
+              <var>Bitmap</var> - Returns a bitmap.  If the contents is not already a bitmap, the contents are thrown away and a blank bitmap is returned.<br/>
+            * 
+              <var>Pixmap</var> - Returns a pixmap.  If the contents is not already a pixmap, the contents are thrown away and a blank pixmap is returned.<br/>
+            * 
               <var>PNG</var> - Returns a png.  If the contents is not already a png, the  contents are thrown away and a blank png (
               
               
               
-              <var>TPortableNetworkGraphic</var>) is returned.</li>
-            <li>
+              <var>TPortableNetworkGraphic</var>) is returned.<br/>
+            * 
               <var>PNM</var> - Returns a pnm.  If the contents is not already a pnm, the contents are thrown away and a blank pnm (
               
               
               
-              <var>TPortableAnyMapGraphic</var>) is returned.</li>
-            <li>
+              <var>TPortableAnyMapGraphic</var>) is returned.<br/>
+            * 
               <var>Jpeg</var> - Returns a jpeg. If the contents is not already a jpeg, the contents are thrown away and a blank jpeg (
               
               
               
-              <var>TJPegImage</var>) is returned.</li>
-          </ul>
+              <var>TJPegImage</var>) is returned.<br/>
+          <br/>
         </descr>
       </element>
       <!-- variable Visibility: private -->
@@ -4740,11 +4699,10 @@ If the file is not of the right format,
       <!-- constructor Visibility: public -->
       <element name="TCanvas.Create">
         <descr>
-          <p>
             <var>Create</var> - constructor for 
             <var>TCanvas</var>: calls inherited 
-            <var>Create</var> and sets defaults for many properties and actions</p>
-          <p>Initialises Font, Pen and Brush, makes event handlers for these, sets up defaults for Alignment, Layout, Clipping and opacity</p>
+            <var>Create</var> and sets defaults for many properties and actions<br/>
+          Initialises Font, Pen and Brush, makes event handlers for these, sets up defaults for Alignment, Layout, Clipping and opacity
         </descr>
         <short>
           <var>Create</var> - constructor for 
@@ -4923,11 +4881,11 @@ Zero degrees is at the 3 o'clock positio
       <!-- procedure Visibility: public -->
       <element name="TCanvas.Chord">
         <descr>
-          <p>Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg</p>
-          <p>Use Chord to draw a filled Chord-shape on the canvas. </p>
-          <p>The angles angle1 and angle2 are 1/16th of a degree. For example, a full circle equals 5760(16*360). </p>
-          <p>Positive values of Angle and AngleLength mean counter-clockwise while negative values mean clockwise direction. Zero degrees is at the 3 o'clock position.</p>
-          <p>Alternatively the starting and ending points may be specified as radial points (sx, sy, ex, ey)</p>
+          Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg<br/>
+          Use Chord to draw a filled Chord-shape on the canvas. <br/>
+          The angles angle1 and angle2 are 1/16th of a degree. For example, a full circle equals 5760(16*360). <br/>
+          Positive values of Angle and AngleLength mean counter-clockwise while negative values mean clockwise direction. Zero degrees is at the 3 o'clock position.<br/>
+          Alternatively the starting and ending points may be specified as radial points (sx, sy, ex, ey)<br/>
         </descr>
         <short>Draw a filled-chord shape starting and finishing at the specified angular positions on the circumference</short>
       </element>
@@ -5349,10 +5307,10 @@ Use <var>Ellipse</var>
         <short>
           <var>RadialPie</var> - draw a filled pie-shaped wedge on the canvas with specified start and end coordinates, and starting and ending angular positions</short>
         <descr>
-          <p>Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg: Integer</p>
-          <p>Use Pie to draw a filled pie-shaped wedge on the canvas.</p>
-          <p>The angles StartAngle16Deg and EndAngle16Deg are 1/16th of a degree. For example, a full circle equals 5760 (16*360).</p>
-          <p>Positive values of Angle and AngleLength mean counter-clockwise while negative values mean clockwise direction. Zero degrees is at the 3 o'clock position.</p>
+          Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg: Integer<br/>
+          Use Pie to draw a filled pie-shaped wedge on the canvas.<br/>
+          The angles StartAngle16Deg and EndAngle16Deg are 1/16th of a degree. For example, a full circle equals 5760 (16*360).<br/>
+          Positive values of Angle and AngleLength mean counter-clockwise while negative values mean clockwise direction. Zero degrees is at the 3 o'clock position.<br/>
         </descr>
       </element>
       <!-- argument Visibility: default -->
@@ -6388,7 +6346,7 @@ Calling the <var>MoveTo</var>
       <element name="TBitmapImage">
         <short>The place where the actual image of a bitmap is stored</short>
         <descr>
-          <p>Descendant of TSharedImage for TBitmap.</p>
+          Descendant of TSharedImage for TBitmap.<br/>
           <var>If a TBitmap is assigned to another TBitmap, only the reference count will be increased and both will share the same TBitmapImage</var>
         </descr>
         <errors/>
@@ -6545,12 +6503,12 @@ Calling the <var>MoveTo</var>
         <short>
           <var>TBitmap</var> is the data of an image, and can be loaded from a file, stream or resource in .bmp  or .xpm format</short>
         <descr>
-          <p>
-            <var>TBitmap</var> is the data of an image. The image can be loaded from a file, stream or resource in .bmp (windows bitmap format) or .xpm (XPixMap format)</p>
-          <p>The loading routine automatically recognizes the format, so it is also used to load the images from Delphi form streams (e.g. .dfm files) or FreePascal/Lazarus form streams (.lfm)</p>
-          <p>When the handle is created, it is up to the interface (gtk, win32, ...) to convert it automatically to the best internal format. That is why the <var>Handle</var> is interface dependent.</p>
-          <p>To access the raw data, see <link id="#lcl.IntfGraphics.TLazIntfImage">TLazIntfImage</link>
-          </p>
+          
+            <var>TBitmap</var> is the data of an image. The image can be loaded from a file, stream or resource in .bmp (windows bitmap format) or .xpm (XPixMap format)<br/>
+          The loading routine automatically recognizes the format, so it is also used to load the images from Delphi form streams (e.g. .dfm files) or FreePascal/Lazarus form streams (.lfm)<br/>
+          When the handle is created, it is up to the interface (gtk, win32, ...) to convert it automatically to the best internal format. That is why the <var>Handle</var> is interface dependent.<br/>
+          To access the raw data, see <link id="#lcl.IntfGraphics.TLazIntfImage">TLazIntfImage</link>
+          <br/>
         </descr>
         <seealso>
           <link id="#lcl.IntfGraphics.TLazIntfImage"/>
@@ -7484,9 +7442,9 @@ Checks for the presence of a valid Lazar
       <element name="TBitmap.Canvas">
         <short>The canvas on which this bitmap is drawn</short>
         <descr>
-          <p>The Canvas is where all the drawing and painting is performed.</p>
-          <p>The properties are described in <link id="Controls.TCanvas">TCanvas</link>
-          </p>
+          The Canvas is where all the drawing and painting is performed.<br/>
+          The properties are described in <link id="Controls.TCanvas">TCanvas</link>
+          <br/>
         </descr>
         <seealso>
           <link id="Graphics.TCanvas"/>
@@ -7784,9 +7742,9 @@ Checks for the presence of a valid Lazar
         <short>
           <var>TIcon</var>  - icons, small images typically associated with applications, controls, etc.</short>
         <descr>
-          <p>Icons can be loaded from .ICO files, or from Lazarus resources.</p>
-          <p>An icon resource typically contains several versions of the same image, in multiple resolutions and color depths. </p>
-          <p>When loading, the largest/most colourful image is loaded as the <var>Bitmap</var> property, and so can be handled as any other bitmap.</p>
+          Icons can be loaded from .ICO files, or from Lazarus resources.<br/>
+          An icon resource typically contains several versions of the same image, in multiple resolutions and color depths. <br/>
+          When loading, the largest/most colourful image is loaded as the <var>Bitmap</var> property, and so can be handled as any other bitmap.<br/>
         </descr>
         <errors>Writing to icon files is not (yet) implemented.</errors>
       </element>
@@ -8669,9 +8627,9 @@ Checks for the presence of a valid Lazar
         <short>
           <var>Jpeg</var>  - returns a JPEG image</short>
         <descr>
-          <p>
-            <var>Jpeg</var>  - returns a JPEG image</p>
-          <p>If the contents is not already a JPEG image, the contents are thrown away and a blank JPEG is returned</p>
+          
+            <var>Jpeg</var>  - returns a JPEG image<br/>
+          If the contents is not already a JPEG image, the contents are thrown away and a blank JPEG is returned<br/>
         </descr>
       </element>
       <element name="TPicture.PNM">
@@ -8682,22 +8640,22 @@ Checks for the presence of a valid Lazar
           
           <b>PortableAnyMapGraphic </b>image</short>
         <descr>
-          <p>
+          
             <var>PNM </var>- a 
             
             
             
-            <b>PortableAnyMapGraphic </b>image</p>
-          <p>Reads a PNM image. If it is not a valid PNM image, the contents are thrown away and a blank PNM is generated</p>
+            <b>PortableAnyMapGraphic </b>image<br/>
+          Reads a PNM image. If it is not a valid PNM image, the contents are thrown away and a blank PNM is generated<br/>
         </descr>
       </element>
       <element name="TJPEGImage">
         <short>
           <var>TJPEGImage</var> - a class for handling images stored in JPEG (compressed) format</short>
         <descr>
-          <p>
-            <b>JPEG</b> images are very commonly used for storing digital photographs. They can represent detailed colour photos using a high degree of compression, resulting in very efficient storage, though with some loss of quality. </p>
-          <p>The properties <var>CompressionQuality</var> (an integer between 1 and 100, with 100 representing the best quality) and <var>Performance</var> (an enumerated variable with two states: <var>BestQuality</var> or <var>BestSpeed</var> ie compression) can be used to determine the balance between efficiency of storage and quality of picture.</p>
+          
+            <b>JPEG</b> images are very commonly used for storing digital photographs. They can represent detailed colour photos using a high degree of compression, resulting in very efficient storage, though with some loss of quality. <br/>
+          The properties <var>CompressionQuality</var> (an integer between 1 and 100, with 100 representing the best quality) and <var>Performance</var> (an enumerated variable with two states: <var>BestQuality</var> or <var>BestSpeed</var> ie compression) can be used to determine the balance between efficiency of storage and quality of picture.<br/>
         </descr>
       </element>
       <element name="TJPEGImage.InitFPImageReader">
@@ -8712,9 +8670,9 @@ Checks for the presence of a valid Lazar
       <element name="TJPEGImage.CompressionQuality">
         <short>Determine the compression quality for this image</short>
         <descr>
-          <p>Extreme compression can lead to loss of quality at the expense of a small file size</p>
-          <p>Allowed range is 1..100 </p>
-          <p>100 = best quality, 25 = pretty awful</p>
+          Extreme compression can lead to loss of quality at the expense of a small file size<br/>
+          Allowed range is 1..100 <br/>
+          100 = best quality, 25 = pretty awful<br/>
         </descr>
       </element>
       <element name="TJPEGImage.GrayScale">
@@ -8779,19 +8737,11 @@ Checks for the presence of a valid Lazar
       <element name="TJPEGImage.GetDefaultFPWriter"/>
       <topic name="Progress">
         <short>Monitoring the progress of drawing a complicated Graphic</short>
-        <descr>
-          <p>
+        <descr><p>
             <var>TProgressEvent</var> is a generic progress notification event which may be used by 
-            
-            
-            
-            
-            
-            
-            <var>TGraphic</var> classes with computationally intensive (slow) operations, such as loading, storing, or transforming image data.</p>
-          <table>
-            <caption>Event params:
-</caption>
+            <var>TGraphic</var> classes with computationally intensive (slow) operations, such as loading, storing, or transforming image data.<br/>
+            </p><table>
+            <caption>Event params:</caption>
             <tr>
               <td>Stage</td>
               <td>Indicates whether this call to the <var>OnProgress</var> event is to prepare for, process, or clean up after a graphic operation.  If <var>OnProgress</var> is called at all, the first call for a graphic operation will be with <var>Stage = psStarting</var>, to allow the <var>OnProgress</var> event handler to allocate whatever resources it needs to process subsequent progress notifications.  After <var>Stage = psStarting</var>, you are guaranteed that  <var>OnProgress</var> will be called again with 
@@ -11110,13 +11060,13 @@ Checks for the presence of a valid Lazar
           
           <var>Source</var> of the call.</short>
         <descr>
-          <p>
+          
             <var>Assign</var>: find out about the 
             
             
-            <var>Source</var> of the call.</p>
-          <p>If the   <var>BitMap</var> data are already in use, the data are shared; if not, a new  <var>BitMap</var> is produced
-</p>
+            <var>Source</var> of the call.<br/>
+          If the   <var>BitMap</var> data are already in use, the data are shared; if not, a new  <var>BitMap</var> is produced
+<br/>
         </descr>
       </element>
       <!-- argument Visibility: default -->
@@ -11427,9 +11377,9 @@ Checks for the presence of a valid Lazar
       <element name="TCustomBitmap.Canvas">
         <short>The <var>Canvas</var> on which this bitmap is drawn</short>
         <descr>
-          <p>The Canvas is where all the drawing and painting is performed.</p>
-          <p>The properties are described in <link id="Controls.TCanvas">TCanvas</link>
-          </p>
+          The Canvas is where all the drawing and painting is performed.<br/>
+          The properties are described in <link id="Controls.TCanvas">TCanvas</link>
+          <br/>
         </descr>
         <seealso>
           <link id="Graphics.TCanvas"/>
@@ -11756,11 +11706,11 @@ Checks for the presence of a valid Lazar
         <short>
           <var>IdentEntry</var> - checks that a given Entry exists in a Map of  colour names</short>
         <descr>
-          <p>
+          
             <var>IdentEntry</var> - checks that a given Entry exists in a Map of  colour names
-</p>
-          <p>A list of system <var>Colors</var> is specified as a look-up table of indices (Entry) and names (MapEntry)</p>
-          <p>This function checks that the value in 
+<br/>
+          A list of system <var>Colors</var> is specified as a look-up table of indices (Entry) and names (MapEntry)<br/>
+          This function checks that the value in 
           
           <var>Entry</var> is within the permitted range, and returns the data pair 
           
@@ -11769,8 +11719,8 @@ Checks for the presence of a valid Lazar
           <var>Name</var> of the corresponding colour in 
           
           <var>MapEntry</var>.
-</p>
-          <p>If <var>Entry</var> is out of range the Result is False</p>
+<br/>
+          If <var>Entry</var> is out of range the Result is False<br/>
         </descr>
         <errors>If <var>Entry</var> is out of the range [0..High(Colours)] the Result is returned as False
 </errors>
Index: lazarus/lcl/include/lcl_defines.inc
===================================================================
--- lazarus.orig/lcl/include/lcl_defines.inc
+++ lazarus/lcl/include/lcl_defines.inc
@@ -8,3 +8,6 @@
   {$OPTIMIZATION NOREMOVEEMPTYPROCS}
 {$ENDIF}
 
+{$IFNDEF FPC_FULLVERSION}
+  {$DEFINE FPDOC}
+{$ENDIF}
