# Build script adapted from Arch Linux (how should one even expect to build
# such software... Ridiculous.

# create a fake go path directory and pushd into it
# $1 real directory
# $2 gopath directory

export GOPATH="$SRCDIR"
export PATH="$GOPATH/bin:$PATH"

### cli
abinfo 'Building cli'
_fake_gopath_pushd docker/components/cli github.com/docker/cli
DISABLE_WARN_OUTSIDE_CONTAINER=1 make VERSION=${PKGVER}-ce dynbinary
_fake_gopath_popd

### daemon
abinfo 'Building daemon'
_fake_gopath_pushd docker/components/engine github.com/docker/docker
DOCKER_GITCOMMIT=$(cd "$SRCDIR"/docker && git rev-parse --short HEAD) \
    DOCKER_BUILDTAGS='seccomp journald' \
    VERSION=${PKGVER}-ce \
    hack/make.sh dynbinary
_fake_gopath_popd

### go-md2man (used for manpages)
abinfo 'Building go-md2man'
_fake_gopath_pushd go-md2man github.com/cpuguy83/go-md2man
go get -v ./...
_fake_gopath_popd

### docker man pages
abinfo 'Building man pages'
mkdir -p src/github.com/spf13
ln -rsfT cobra src/github.com/spf13/cobra
# use docker-ce cli version because they mess up with man dir
_fake_gopath_pushd docker/components/cli github.com/docker/cli
make manpages 2>/dev/null
_fake_gopath_popd

### runc
abinfo 'Building runc'
_fake_gopath_pushd runc github.com/opencontainers/runc
make BUILDTAGS='seccomp'
_fake_gopath_popd

### containerd
abinfo 'Building containerd'
_fake_gopath_pushd containerd github.com/containerd/containerd
make
_fake_gopath_popd

### docker proxy
abinfo 'Building docker-proxy'
_fake_gopath_pushd libnetwork github.com/docker/libnetwork
go build -ldflags='-linkmode=external' \
    github.com/docker/libnetwork/cmd/proxy
_fake_gopath_popd

### docker-init
abinfo 'Building docker-init'
_fake_gopath_pushd tini github.com/krallin/tini
cmake .
# we must use the static binary because it's started in a foreign os
make tini-static
_fake_gopath_popd

### runc
install -Dm755 runc/runc "$PKGDIR/usr/bin/runc"
### containerd
install -Dm755 containerd/bin/containerd \
    "$PKGDIR/usr/bin/containerd"
install -Dm755 containerd/bin/containerd-shim \
    "$PKGDIR/usr/bin/containerd-shim"
install -Dm755 containerd/bin/ctr \
    "$PKGDIR/usr/bin/containerd-ctr"
### proxy
install -Dm755 libnetwork/proxy \
    "$PKGDIR/usr/bin/docker-proxy"
### init
install -Dm755 tini/tini-static \
    "$PKGDIR/usr/bin/docker-init"
### engine
cd "$SRCDIR"/docker/components/engine
# binary
install -Dm755 {bundles/dynbinary-daemon,"$PKGDIR"/usr/bin}/dockerd
# systemd
install -Dm644 'contrib/init/systemd/docker.service' \
    "$PKGDIR/usr/lib/systemd/system/docker.service"
install -Dm644 'contrib/init/systemd/docker.socket' \
    "$PKGDIR/usr/lib/systemd/system/docker.socket"
install -Dm644 'contrib/udev/80-docker.rules' \
    "$PKGDIR/usr/lib/udev/rules.d/80-docker.rules"
# vim syntax
install -Dm644 'contrib/syntax/vim/syntax/dockerfile.vim' \
    "$PKGDIR/usr/share/vim/vimfiles/syntax/dockerfile.vim"
install -Dm644 'contrib/syntax/vim/ftdetect/dockerfile.vim' \
    "$PKGDIR/usr/share/vim/vimfiles/ftdetect/dockerfile.vim"
### cli
cd "$SRCDIR"/docker/components/cli
# binary
install -Dm755 build/docker "$PKGDIR/usr/bin/docker"
# completion
install -Dm644 'contrib/completion/bash/docker' \
    "$PKGDIR/usr/share/bash-completion/completions/docker"
install -Dm644 'contrib/completion/zsh/_docker' \
    "$PKGDIR/usr/share/zsh/site-functions/_docker"
install -Dm644 'contrib/completion/fish/docker.fish' \
    "$PKGDIR/usr/share/fish/vendor_completions.d/docker.fish"
# man
install -dm755 "$PKGDIR/usr/share/man"
cp -r man/man* "$PKGDIR/usr/share/man"
