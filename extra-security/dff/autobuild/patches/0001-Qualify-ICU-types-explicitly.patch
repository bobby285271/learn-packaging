From 3b05e017035c889667e78340937f3907e93e2c60 Mon Sep 17 00:00:00 2001
From: Kexy Biscuit <kexybiscuit@aosc.io>
Date: Thu, 8 Aug 2019 16:42:35 +0800
Subject: [PATCH] Qualify ICU types explicitly.

---
 dff/modules/fs/fat/fattree.cpp                   | 2 +-
 dff/modules/fs/hfsp/catalog/hfsprecords.cpp      | 2 +-
 dff/modules/fs/hfsp/catalog/hfsrecords.cpp       | 2 +-
 dff/modules/fs/ntfs/attributes/attributelist.cpp | 2 +-
 dff/modules/fs/ntfs/attributes/filename.cpp      | 2 +-
 dff/modules/fs/ntfs/attributes/reparsepoint.cpp  | 4 ++--
 dff/modules/fs/ntfs/attributes/volume.cpp        | 2 +-
 dff/modules/fs/ntfs/mftattribute.cpp             | 2 +-
 dff/modules/volumes/partition/gpt.hpp            | 4 ++--
 9 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/dff/modules/fs/fat/fattree.cpp b/dff/modules/fs/fat/fattree.cpp
index 8b647bf..00556f4 100644
--- a/dff/modules/fs/fat/fattree.cpp
+++ b/dff/modules/fs/fat/fattree.cpp
@@ -705,7 +705,7 @@ Node*	FatTree::__allocNode(ctx* c, Node* parent)
   
   if (!c->lfnname.empty())
     {
-      UnicodeString	us(c->lfnname.data(), c->lfnname.size(), "UTF-16LE");
+      icu::UnicodeString	us(c->lfnname.data(), c->lfnname.size(), "UTF-16LE");
       std::string	utf8 = "";
       std::string ret = us.toUTF8String(utf8);
       name = std::string(utf8.data(), utf8.size());
diff --git a/dff/modules/fs/hfsp/catalog/hfsprecords.cpp b/dff/modules/fs/hfsp/catalog/hfsprecords.cpp
index 886ca53..0856d70 100644
--- a/dff/modules/fs/hfsp/catalog/hfsprecords.cpp
+++ b/dff/modules/fs/hfsp/catalog/hfsprecords.cpp
@@ -186,7 +186,7 @@ std::string	HfspCatalogKey::name()
   if (((this->_buffer != NULL) && (this->_size >= namelen+8)))
     {
       utf8 = "";
-      UnicodeString us((char*)(this->_buffer+8), namelen, "UTF-16BE");
+      icu::UnicodeString us((char*)(this->_buffer+8), namelen, "UTF-16BE");
       //XXX ugly but necessary condition to match HFS Private Data which starts with
       // 4 utf-16 null char...
       // https://developer.apple.com/legacy/library/technotes/tn/tn1150.html#HardLinks
diff --git a/dff/modules/fs/hfsp/catalog/hfsrecords.cpp b/dff/modules/fs/hfsp/catalog/hfsrecords.cpp
index f78d45d..5a3532f 100644
--- a/dff/modules/fs/hfsp/catalog/hfsrecords.cpp
+++ b/dff/modules/fs/hfsp/catalog/hfsrecords.cpp
@@ -173,7 +173,7 @@ std::string	HfsCatalogKey::name()
   if ((this->_buffer != NULL) && (this->_size >= namelen+7))
     {
       utf8 = "";
-      UnicodeString us((char*)(this->_buffer+7), namelen);
+      icu::UnicodeString us((char*)(this->_buffer+7), namelen);
       std::string ret = us.trim().toUTF8String(utf8);
     }
   return utf8;
diff --git a/dff/modules/fs/ntfs/attributes/attributelist.cpp b/dff/modules/fs/ntfs/attributes/attributelist.cpp
index d2f8d4c..d117cb3 100644
--- a/dff/modules/fs/ntfs/attributes/attributelist.cpp
+++ b/dff/modules/fs/ntfs/attributes/attributelist.cpp
@@ -41,7 +41,7 @@ AttributeListItems::AttributeListItems(VFile* vfile)
   {
     uint16_t* name = new uint16_t[this->__attributeList.nameSize];
     offset += vfile->read((void*)name, this->__attributeList.nameSize * sizeof(uint16_t));
-    UnicodeString((char*)name, __attributeList.nameSize * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
+    icu::UnicodeString((char*)name, __attributeList.nameSize * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
     delete[] name;
   }
 
diff --git a/dff/modules/fs/ntfs/attributes/filename.cpp b/dff/modules/fs/ntfs/attributes/filename.cpp
index f25a70d..493ae35 100644
--- a/dff/modules/fs/ntfs/attributes/filename.cpp
+++ b/dff/modules/fs/ntfs/attributes/filename.cpp
@@ -58,7 +58,7 @@ FileName::FileName(MFTAttribute* mftAttribute) : MFTAttributeContent(mftAttribut
     delete vfile;
     throw std::string("$FILE_NAME can't read name.");
   }
-  UnicodeString((char*)name, this->nameLength() * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
+  icu::UnicodeString((char*)name, this->nameLength() * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
   delete[] name;
   delete vfile;
 }
diff --git a/dff/modules/fs/ntfs/attributes/reparsepoint.cpp b/dff/modules/fs/ntfs/attributes/reparsepoint.cpp
index 96adf97..e09a3be 100644
--- a/dff/modules/fs/ntfs/attributes/reparsepoint.cpp
+++ b/dff/modules/fs/ntfs/attributes/reparsepoint.cpp
@@ -59,7 +59,7 @@ ReparsePoint::ReparsePoint(MFTAttribute* mftAttribute) : MFTAttributeContent(mft
     delete vfile;
     throw std::string("$REPARSE_POINT can't read target name.");
   }
-  UnicodeString((char*)target, this->targetSize(), "UTF16-LE").toUTF8String(this->__target);
+  icu::UnicodeString((char*)target, this->targetSize(), "UTF16-LE").toUTF8String(this->__target);
   delete[] target;
 
   offset = this->printOffset() + sizeof(ReparsePoint_s);
@@ -75,7 +75,7 @@ ReparsePoint::ReparsePoint(MFTAttribute* mftAttribute) : MFTAttributeContent(mft
     delete vfile;
     throw std::string("$REPARSE_POINT can't read print name.");
   }
-  UnicodeString((char*)print, this->printSize(), "UTF16-LE").toUTF8String(this->__print);
+  icu::UnicodeString((char*)print, this->printSize(), "UTF16-LE").toUTF8String(this->__print);
   delete[] print;
 
   delete vfile;
diff --git a/dff/modules/fs/ntfs/attributes/volume.cpp b/dff/modules/fs/ntfs/attributes/volume.cpp
index 62be35b..d8d6559 100644
--- a/dff/modules/fs/ntfs/attributes/volume.cpp
+++ b/dff/modules/fs/ntfs/attributes/volume.cpp
@@ -48,7 +48,7 @@ VolumeName::VolumeName(MFTAttribute* mftAttribute) : MFTAttributeContent(mftAttr
 const std::string VolumeName::volumeName(void)
 {
   std::string	volumeName;
-  UnicodeString((char*)this->__volumeName, this->size(), "UTF16-LE").toUTF8String(volumeName);
+  icu::UnicodeString((char*)this->__volumeName, this->size(), "UTF16-LE").toUTF8String(volumeName);
 
   return (volumeName);
 }
diff --git a/dff/modules/fs/ntfs/mftattribute.cpp b/dff/modules/fs/ntfs/mftattribute.cpp
index 1d57099..9cdf020 100644
--- a/dff/modules/fs/ntfs/mftattribute.cpp
+++ b/dff/modules/fs/ntfs/mftattribute.cpp
@@ -85,7 +85,7 @@ MFTAttribute::MFTAttribute(MFTEntryNode* mftEntryNode, uint64_t offset) : __offs
       this->destroy();
       throw std::string("MFT can't read attribute name");
     }
-    UnicodeString((char*)name, this->__mftAttribute.nameSize * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
+    icu::UnicodeString((char*)name, this->__mftAttribute.nameSize * sizeof(uint16_t), "UTF16-LE").toUTF8String(this->__name);
     delete[] name;
   }
   delete vfile;
diff --git a/dff/modules/volumes/partition/gpt.hpp b/dff/modules/volumes/partition/gpt.hpp
index 4235a1b..105ab3c 100644
--- a/dff/modules/volumes/partition/gpt.hpp
+++ b/dff/modules/volumes/partition/gpt.hpp
@@ -127,7 +127,7 @@ typedef struct
   uint64_t	size() {return  lastLba() - firstLba() + 1;}
   std::string	name()
   {
-    UnicodeString	us;
+    icu::UnicodeString	us;
     std::string		utf8;
     int			i;
     
@@ -137,7 +137,7 @@ typedef struct
 	i = 70;
 	while (i != 0 && ((uint16_t)(*(_name+i)) == 0))
 	  i-=2;
-	us = UnicodeString(_name, i+2, "UTF-16LE");
+	us = icu::UnicodeString(_name, i+2, "UTF-16LE");
 	us.toUTF8String(utf8);
       }
     return utf8;
-- 
2.23.0.rc1.windows.1

