diff -ru vde2-2.3.2.orig/src/vde_switch/hash.c vde2-2.3.2/src/vde_switch/hash.c
--- vde2-2.3.2.orig/src/vde_switch/hash.c	2011-11-23 17:41:17.000000000 +0100
+++ vde2-2.3.2/src/vde_switch/hash.c	2014-10-07 13:51:35.396596610 +0200
@@ -49,8 +49,11 @@
 	u_int64_t dst;
 };
 
+static int delayed_hash_gc;
 static struct hash_entry **h;
 
+static void hash_gc(void *arg); // forward declaration
+
 static int calc_hash(u_int64_t src)
 {
 	register int x = src * 0x030507090b0d1113LL;
@@ -89,6 +92,7 @@
  * port */
 int find_in_hash(unsigned char *dst,int vlan)
 {
+	if (delayed_hash_gc) hash_gc(NULL);
 	struct hash_entry *e = find_entry(extmac(dst,vlan));
 	if(e == NULL) return -1;
 	return(e->port);
@@ -102,6 +106,7 @@
 	int k = calc_hash(esrc);
 	int oldport;
 	time_t now;
+	if (delayed_hash_gc) hash_gc(NULL);
 	for(e = h[k]; e && e->dst != esrc; e = e->next)
 		;
 	if(e == NULL) {
@@ -267,9 +272,17 @@
 static void hash_gc(void *arg)
 {
 	time_t t = qtime();
+	delayed_hash_gc = 0;
 	for_all_hash(&gc, &t);
 }
 
+/* actual handler which is called every GC_INTERVAL seconds. only set a flag
+   to stay "thread-safe" */
+static void hash_gc_flag(void *arg)
+{
+	delayed_hash_gc++;
+}
+
 #define HASH_INIT(BIT) \
 	({ hash_bits=(BIT);\
 	 hash_mask=HASH_SIZE-1;\
@@ -310,7 +323,7 @@
 {
 	qtimer_del(gc_timerno);
 	gc_interval=p;
-	gc_timerno=qtimer_add(gc_interval,0,hash_gc,NULL);
+	gc_timerno=qtimer_add(gc_interval,0,hash_gc_flag,NULL);
 	return 0;
 }
 
@@ -410,7 +423,7 @@
 
 	gc_interval=GC_INTERVAL;
 	gc_expire=GC_EXPIRE;
-	gc_timerno=qtimer_add(gc_interval,0,hash_gc,NULL);
+	gc_timerno=qtimer_add(gc_interval,0,hash_gc_flag,NULL);
 	ADDCL(cl);
 #ifdef DEBUGOPT
 	ADDDBGCL(dl);
