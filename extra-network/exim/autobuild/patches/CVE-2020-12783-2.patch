Backported of:

From a04174dc2a84ae1008c23b6a7109e7fa3fb7b8b0 Mon Sep 17 00:00:00 2001
From: Jeremy Harris <jgh146exb@wizmail.org>
Date: Wed, 6 May 2020 22:31:25 +0100
Subject: [PATCH] Rework SPA fix to avoid overflows.  Bug 2571

Amends: 57aa14b216
Index: exim4-4.90.1/src/auths/spa.c
===================================================================
--- exim4-4.90.1.orig/src/auths/spa.c
+++ exim4-4.90.1/src/auths/spa.c
@@ -140,6 +140,7 @@ SPAAuthResponse  response;
 SPAAuthResponse  *responseptr = &response;
 uschar msgbuf[2048];
 uschar *clearpass, *s;
+unsigned off;
 
 /* send a 334, MS Exchange style, and grab the client's request,
 unless we already have it via an initial response. */
@@ -194,10 +195,13 @@ that causes failure if the size of msgbu
 
   {
   int i;
-  char *p = ((char*)responseptr) + IVAL(&responseptr->uUser.offset,0);
+  char * p;
   int len = SVAL(&responseptr->uUser.len,0)/2;
 
-  if (p + len*2 >= CS (responseptr+1))
+  if (  (off = IVAL(&responseptr->uUser.offset,0)) >= sizeof(SPAAuthResponse)
+     || len >= sizeof(responseptr->buffer)/2
+     || (p = (CS responseptr) + off) + len*2 >= CS (responseptr+1)
+     )
     {
     DEBUG(D_auth)
       debug_printf("auth_spa_server(): bad uUser spec in response\n");
@@ -252,13 +256,14 @@ spa_smb_nt_encrypt (clearpass, challenge
 
 /* compare NT hash (LM may not be available) */
 
-s = (US responseptr) + IVAL(&responseptr->ntResponse.offset,0);
-if (s + 24 >= US (responseptr+1))
+off = IVAL(&responseptr->ntResponse.offset,0);
+if (off >= sizeof(SPAAuthResponse) - 24)
   {
   DEBUG(D_auth)
     debug_printf("auth_spa_server(): bad ntRespData spec in response\n");
   return FAIL;
   }
+s = (US responseptr) + off;
 
 if (memcmp(ntRespData, s, 24) == 0)
   /* success. we have a winner. */
