Description: fix warnings involving implicits for upstream source
 Fix warnings involving implicits as emitted by gcc when the package
 builds; meant to be submitted to the upstream maintainer.
Origin: debian
Author: Jerome Benoit <calculus@rezozer.net>
Last-Update: 2014-09-14

--- a/hiccup.c
+++ b/hiccup.c
@@ -49,7 +49,9 @@
 	INT free_garnir_parameters (void);
 	INT set_useful_monopolies (void);
 	INT free_useful_monopolies (void);
-	set_multiplier (OP extra);
+#endif
+	void set_multiplier (OP extra);
+#ifdef UNDEF
 	hecke_action (OP tableau, OP permutation, OP list);
 	INT hecke_action_perm_on_lc (OP tableaux, OP permutation);
 	INT find_non_rowstandard_pos (OP tableau, INT *r, INT *c);
@@ -70,22 +72,26 @@
 	INT root_dimension (OP partition, OP p_root, OP dim);
 	INT generate_root_tableaux (OP partition, OP p_root, OP std);
 	INT hecke_root_generator_reps (OP partition, OP p_root, OP vector);
-	INT root_represent_hecke_action (OP partition, 
+	INT root_represent_hecke_action (OP partition,
 	OP p_root, OP hecke, OP mat);
 	INT root_standardise_cold_tableaux_list (OP tableaux, OP p_root, OP result);
 
 	INT set_root_parameters (OP partition, OP p_root);
 	INT free_root_parameters (void);
 	INT find_non_root_standard_pos (OP tableau);
-	set_root_multiplier (OP extra);
-	root_standardise_tableau_list (OP list, OP expression);
-	root_standardise_tableau (OP tableau, OP expression);
-	root_juggle (OP tableau, INT power, INT coeff);
-	strip_juggle (OP tableau, INT power, INT coeff);
-	root_garnir_result (OP tableau, OP mp_coeff, OP acc_list);
+#endif
+	void set_root_multiplier (OP extra);
+	void root_standardise_tableau_list (OP list, OP expression);
+	void root_standardise_tableau (OP tableau, OP expression);
+	void root_juggle (OP tableau, INT power, INT coeff);
+	void strip_juggle (OP tableau, INT power, INT coeff);
+	void root_garnir_result (OP tableau, OP mp_coeff, OP acc_list);
+#ifdef UNDEF
 	INT root_normalise_monopoly (OP mono);
-	generate_sym_tableaux_list (INT piece, OP sym_list);
-	coset_generate (INT head, INT wag);
+#endif
+	void generate_sym_tableaux_list (INT piece, OP sym_list);
+	void coset_generate (INT head, INT wag);
+#ifdef UNDEF
 	INT remove_mp_qnumber_fac (OP mp, INT qn);
 	INT remove_vec_qnumber (INT qn);
 
@@ -780,7 +786,7 @@
 }
 
 
-int set_multiplier (extra) OP extra;
+void set_multiplier (extra) OP extra;
 
 /* all standard tableaux that are now found are added to the list
       after their coefficients have been multiplied by extra
@@ -2091,7 +2097,7 @@
 }
 
 
-set_root_multiplier (extra) OP extra;
+void set_root_multiplier (extra) OP extra;
 
 /* all standard tableaux that are now found are added to the list
       after their coefficients have been multiplied by extra
@@ -2103,7 +2109,7 @@
 }
 
 
-root_standardise_tableau_list ( list,  expression)
+void root_standardise_tableau_list ( list,  expression)
 	OP list;
 	OP expression;
 
@@ -2124,7 +2130,7 @@
 }
 
 
-root_standardise_tableau ( tableau,  expression)
+void root_standardise_tableau ( tableau,  expression)
 	OP tableau;
 	OP expression;
 
@@ -2168,7 +2174,7 @@
 }
 
 
-root_juggle ( tableau,  power,  coeff)
+void root_juggle ( tableau,  power,  coeff)
 	OP tableau;
 	INT power;
 	INT coeff;
@@ -2261,7 +2267,7 @@
 }
 
 
-strip_juggle (tableau, power, coeff)
+void strip_juggle (tableau, power, coeff)
 	OP tableau;
 	INT power;
 	INT coeff;
@@ -2644,7 +2650,7 @@
 #if NORMALISE == 1          /* include if we want resultant coefficients
 tidied up with respect to the root of unity */
 
-root_garnir_result ( tableau,  mp_coeff,  acc_list)
+void root_garnir_result ( tableau,  mp_coeff,  acc_list)
 	OP tableau;
 	OP mp_coeff;
 	OP acc_list;
@@ -2805,7 +2811,7 @@
 #endif          /* for NORMALISE */
 
 
-generate_sym_tableaux_list (piece, sym_list)
+void generate_sym_tableaux_list (piece, sym_list)
 	INT piece;
 	OP sym_list;
 
@@ -2888,7 +2894,7 @@
 }
 
 
-coset_generate (head, wag) INT head; INT wag;
+void coset_generate (head, wag) INT head; INT wag;
 
 /* Recursive function which creates all the terms in the coset.
    Method is much the same as that used for garnir_generate().
--- a/def.h
+++ b/def.h
@@ -811,6 +811,7 @@
 extern INT cast_apply_polynom();
 extern INT cast_apply_powsym();
 extern INT cast_apply_schur();
+extern INT cast_apply_schubert();
 extern INT cast_apply_tableaux();
 extern INT cast_elmsym();
 extern INT cast_homsym();
@@ -1583,6 +1584,7 @@
 extern INT invers_apply_bruch();
 extern INT invers_apply_integer();
 extern INT invers_apply_longint();
+extern INT invers_apply_ff();
 extern INT invers_bar();
 extern INT invers_bitvector();
 extern INT invers_bruch();
--- a/rest.c
+++ b/rest.c
@@ -2595,6 +2595,7 @@
 {
     INT erg = OK;
     char *oldt = t;
+    int SYM_isdigit();
 
     while (*t == ' ') t++;
     if (*t == '-') t++;
@@ -5064,7 +5065,7 @@
 
 
 
-static orbit_max_size = -1;
+static INT orbit_max_size = (INT)-1;
 INT orbit_set_max_size(INT s)
 /* sets a limit on the orbit size */
 /* -1 = no limit */
@@ -5193,7 +5194,7 @@
 
 
 
-static all_orbits_trace=0;
+static int all_orbits_trace=0;
 static INT (*all_orbits_rankf)()=NULL;
 INT all_orbits_set_trace() { all_orbits_trace=1; }
 INT all_orbits_unset_trace() { all_orbits_trace=0; }
--- a/di.c
+++ b/di.c
@@ -551,7 +551,7 @@
 /***********************************************************************/
 /* RH 031092 */
 
-dixon_wilf_examples(G,weight,anz,FP)
+INT dixon_wilf_examples(G,weight,anz,FP)
 	OP	G; OP	weight; OP	anz; OP	FP;
 {
 	INT Canz;
--- a/mod_dg_sbd.c
+++ b/mod_dg_sbd.c
@@ -20,8 +20,8 @@
 /* basis fuer specht modul mit sbd */
 
 static OP zero_one_matrices = NULL;
-static init_zero_one(OP part);
-static close_zero_one();
+static INT init_zero_one(OP part);
+static INT close_zero_one();
 
 static INT operate_perm_spaltenmatrix_new(a,b,c) OP a,b,c;
 /* vertausch spalten gemaess der permutation */
@@ -430,7 +430,7 @@
     ENDR("get_symm_specht_poly");
 }
 
-static init_zero_one(part) OP part;
+static INT init_zero_one(part) OP part;
 /* this vector of zero one matrices are the possible exponent in the 
    sbd */
 {
@@ -446,7 +446,7 @@
     qsort_vector(zero_one_matrices);
     ENDR("internal:init_zero_one");
 }
-static close_zero_one()
+static INT close_zero_one()
 {
     INT erg =OK;
     erg+=freeall(zero_one_matrices); zero_one_matrices=NULL;
--- a/mo.c
+++ b/mo.c
@@ -14,8 +14,8 @@
 
 #define SYM_memcmp memcmp
 
-static close_mat();
-static init_mat();
+static void init_mat();
+static void close_mat();
 static INT _ber_inx_dec();
 static INT modmat();
 static INT moddreimat();
@@ -1306,10 +1306,10 @@
 	return OK;
 } /*schnitt*/
 
-struct ak { 
-	INT c; 
-	INT p; 
-	char *ptr; 
+struct ak {
+	INT c;
+	INT p;
+	char *ptr;
 };
 
 static struct ak * ak_tmpfile()
@@ -1325,15 +1325,15 @@
 	init_mat();
 }
 
-static ak_rewind(a) struct ak *a;
+static INT ak_rewind(a) struct ak *a;
 {
 	a->p = (INT)0;
 	return OK;
 }
 
-static ak_fread(buf,size,numb,a) char **buf; 
-	INT size; 
-	INT numb; 
+static INT ak_fread(buf,size,numb,a) char **buf;
+	INT size;
+	INT numb;
 	struct ak *a;
 {
 	size = size * numb;
@@ -1348,9 +1348,9 @@
 
 #define AXSIZE 10000
 
-static ak_fwrite(buf,size,numb,a) char *buf; 
-	INT size; 
-	INT numb; 
+static INT ak_fwrite(buf,size,numb,a) char *buf;
+	INT size;
+	INT numb;
 	struct ak *a;
 {
 	size = size *numb;
@@ -1374,7 +1374,7 @@
 	return a->p;
 }
 
-static ak_fclose(a) struct ak *a;
+static void ak_fclose(a) struct ak *a;
 {
 	close_mat();
 }
@@ -1414,7 +1414,7 @@
 INT mat_length[PRIME];
 #endif
 
-static init_mat()
+static void init_mat()
 {
 	INT i,size;
 	TL_BYTE *a,*b;
@@ -1441,7 +1441,7 @@
 
 }
 
-static close_mat()
+static void close_mat()
 {
 	INT i;
 	if (mat_size != q_zeilenz) error("MO-35");
--- a/rh.c
+++ b/rh.c
@@ -49,11 +49,12 @@
 static INT monomausgabe();
 static  int trans_reihe_in_monom();
 static int copyy_monom();
-static JH_copy_reihe();
-static JH_copy_reihe_co();
+static void JH_copy_reihe();
+static void JH_copy_reihe_co();
 static INT  reihe_zu_sympolynom(), monom_zu_symmonom();
 static INT  poly_zu_sympolynom();
-static int ausgabe(), copy_var(), copy_mon();
+static int ausgabe();
+static void copy_var(), copy_mon();
 static int free_drei(), free_zwei(), free_eins();
 
 static int del_poly(p) struct REIHE_poly **p;
@@ -93,54 +94,46 @@
       }
 }
 
-static int copy_poly(a,b) struct REIHE_poly **b,*a;
+static void copy_poly(a,b) struct REIHE_poly **b,*a;
 /* AK 150393 */
 {
-   if (a==NULL)
-      return (int)(*b = NULL);
+   if (a==NULL)  { *b = NULL; return ; }
    *b = (struct REIHE_poly *) SYM_malloc(sizeof(struct REIHE_poly));
-   if (*b == NULL)
-      return (int)no_memory;
+   if (*b == NULL) { no_memory(); return ; }
    (*b)->grad = a->grad;
 
    copy_mon(a->unten, & (*b)->unten);
    copy_poly(a->rechts, & (*b)->rechts);
 }
 
-static int copy_mon(a,b) struct REIHE_mon **b,*a;
+static void copy_mon(a,b) struct REIHE_mon **b,*a;
 /* AK 150393 */
 {
-   if (a==NULL)
-      return (int)(*b = NULL);
+   if (a==NULL) { *b = NULL; return ; }
    *b = (struct REIHE_mon *) SYM_malloc(sizeof(struct REIHE_mon));
-   if (*b == NULL)
-      return (int)no_memory;
+   if (*b == NULL) { no_memory(); return ; }
    (*b)->coeff=callocobject();
    copy(a->coeff, (*b)->coeff);
    copy_mon(a->ref, & (*b)->ref);
    copy_var(a->zeiger, & (*b)->zeiger);
 }
 
-static int copy_var(a,b) struct REIHE_variablen **b,*a;
+static void copy_var(a,b) struct REIHE_variablen **b,*a;
 /* AK 150393 */
 {
-   if (a == NULL)
-      return (int)(*b = NULL);
+   if (a == NULL) { *b = NULL; return ; }
    *b = (struct REIHE_variablen *) SYM_malloc(sizeof(struct REIHE_variablen));
-   if (*b == NULL)
-      return (int)no_memory;
+   if (*b == NULL) { no_memory(); return ; }
    (*b)->index = a->index;
    (*b)->potenz = a->potenz;
    copy_var(a->weiter, & (*b)->weiter);
 }
 
-static int copy_rh(a,b) REIHE_zeiger a,*b;
+static void copy_rh(a,b) REIHE_zeiger a,*b;
 {
-   if (a == NULL)
-      return (int)(*b = NULL);
+   if (a == NULL) { *b = NULL; return ; }
    *b = (struct reihe *) SYM_malloc(sizeof(struct reihe));
-   if (*b == NULL)
-      return (int)no_memory;
+   if (*b == NULL) { no_memory(); return ; }
    (*b)->exist = a->exist;
    (*b)->reihenart = a->reihenart;
    (*b)->z = a->z;
@@ -1486,16 +1479,17 @@
 }
 
 
-static JH_copy_reihe(a,c) REIHE_zeiger a; REIHE_zeiger* c;
+static void JH_copy_reihe(a,c) REIHE_zeiger a; REIHE_zeiger* c;
 {
-   return JH_copy_reihe_co(a,c,1);
+   JH_copy_reihe_co(a,c,1);
 }
-static AK_copy_reihe(a,c) REIHE_zeiger a; REIHE_zeiger* c;
+
+static void AK_copy_reihe(a,c) REIHE_zeiger a; REIHE_zeiger* c;
 {
-   return JH_copy_reihe_co(a,c,0);
+   JH_copy_reihe_co(a,c,0);
 }
 
-static JH_copy_reihe_co(a,c,i) REIHE_zeiger a; REIHE_zeiger* c; int i;
+static void JH_copy_reihe_co(a,c,i) REIHE_zeiger a; REIHE_zeiger* c; int i;
 /* JH 0293 */
 {
    struct REIHE_mon *zeigmon,*hmon;
@@ -2111,7 +2105,7 @@
 }
 
 
-jh_ausgabe_vorbereiten(f, a, r) REIHE_zeiger* a; FILE *f;
+static void jh_ausgabe_vorbereiten(f, a, r) REIHE_zeiger* a; FILE *f;
 	REIHE_zeiger r[];
 /* JH 0293 */
 {
--- a/part.c
+++ b/part.c
@@ -1741,7 +1741,7 @@
 }
 
 
-static int rec01();
+static INT rec01();
 INT numberofpart(n, res) OP n,res;
 /* AK 191202 */
 /* bressoud: proofs and confirmations p.37 */
@@ -1763,19 +1763,19 @@
     ENDR("numberofpart");
 }
 
-static int rec01(INT ni, OP vec)
+static INT rec01(INT ni, OP vec)
 /* to compute number of partitions */
 {
     INT erg = OK;
-    if (ni<0) return;
-    if (not EMPTYP(S_V_I(vec,ni))) return;
+    if (ni<0) return ERROR;
+    if (not EMPTYP(S_V_I(vec,ni))) return ERROR;
     else if (ni<=1) M_I_I(1,S_V_I(vec,ni));
     else {
-     
+
         INT m,og;
         og = ni/3+3;
         m_i_i(0,S_V_I(vec,ni));
-     
+
         for (m=1;m<og;m++)
         {
             INT j;
--- a/de.c
+++ b/de.c
@@ -751,7 +751,7 @@
 int SYM_strlen(a) char *a; /* AK 030294 */
 { int i=0; while (*a++) i++; return i; }
 
-int SYM_memcmp(a,b,c) char *a,*b; /* AK 210294 */
+int SYM_memcmp(a,b,c) char *a,*b; size_t c; /* AK 210294 */
 { return memcmp(a,b,c); }
 
 int SYM_abs(a) INT a; /* AK 230695 */
