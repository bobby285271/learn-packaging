Description: fix format warnings for upstream source
 Fix -Wformat warnings as emitted by gcc when the package builds;
 meant to be submitted to the upstream maintainer.
Origin: debian
Author: Jerome Benoit <calculus@rezozer.net>
Last-Update: 2014-09-14

--- a/def.h
+++ b/def.h
@@ -3,9 +3,16 @@
 #ifndef DEF_H
 
 #include <stdint.h>
+#include <inttypes.h>
 typedef int32_t INT;
 typedef uint32_t UINT;
 
+#define PRIINT PRId32
+#define SCNINT SCNd32
+
+#define PRIUINT PRIu32
+#define SCNUINT SCNu32
+
 #include <stdio.h>
 #include <memory.h>
 #include <stdlib.h>
@@ -65,6 +72,8 @@
  * and OBJECTSELF to have a size equal to a machine word. */
 typedef intptr_t OBJECTKIND;
 
+#define PRIOBJECTKIND PRIdPTR
+
 typedef union {
 	intptr_t ob_INT;
 	INT * ob_INTpointer;
--- a/bruch.c
+++ b/bruch.c
@@ -43,7 +43,7 @@
     if (no_banner != TRUE)
     if (mem_counter_bruch != 0L)
         {
-        fprintf(stderr,"mem_counter_bruch = %ld\n",mem_counter_bruch);
+        fprintf(stderr, "mem_counter_bruch = %" PRIINT "\n" ,mem_counter_bruch);
         erg += error("bruch memory not freed");
         goto endr_ende;
         }
@@ -1961,7 +1961,7 @@
 {
     INT erg = OK;
     CTO(BRUCH,"objectwrite_bruch(2)",a);
-    fprintf(f,"%ld\n", (INT)BRUCH);
+    fprintf(f, "%" PRIINT "\n" , (INT)BRUCH);
     erg += objectwrite(f,S_B_O(a));
     erg += objectwrite(f,S_B_U(a)); 
     ENDR("objectwrite_bruch");
--- a/de.c
+++ b/de.c
@@ -510,7 +510,7 @@
         break;
     case 1: 
         fprintf(stderr,"kind:1=integer value:");
-        fprintf(stderr,"%ld\n",s_i_i(a));
+        fprintf(stderr, "%" PRIINT "\n" ,s_i_i(a));
         return(OK);
 #ifdef VECTORTRUE
         case 120199: case 31:
@@ -532,7 +532,7 @@
         for (i=0L;i<s_v_li(a);i++)
         {
         for (k=0L;k<doffset;k++) fprintf(stderr," ");
-        fprintf(stderr,"%s %ld-komponente:\n",text,i);
+        fprintf(stderr, "%s %" PRIINT "-komponente:\n" ,text,i);
         doffset += 2L;
         debugprint(s_v_i(a,i));
         doffset -= 2L;
@@ -559,7 +559,7 @@
 #ifdef BRUCHTRUE
     case 4: 
         {
-        fprintf(stderr,"kind:4=bruch gekuerzt=%ld oben:\n", s_b_i(a));
+        fprintf(stderr, "kind:4=bruch gekuerzt=%" PRIINT " oben:\n" , s_b_i(a));
         doffset += 2L;
         debugprint(s_b_o(a));
         doffset -= 2L;
@@ -661,7 +661,7 @@
         for (j=0L;j<s_m_li(a);j++)
         {
         for (k=0L;k<doffset;k++) fprintf(stderr," ");
-        fprintf(stderr,"%s %ld %ld-komponente:\n",text,i,j);
+        fprintf(stderr, "%s %" PRIINT " %" PRIINT "-komponente:\n" ,text,i,j);
         doffset += 2L;
         debugprint(s_m_ij(a,i,j));
         doffset -= 2L;
@@ -726,7 +726,7 @@
         doffset += 2L;
         C_O_K(a,VECTOR);
         for (k=0L;k<doffset;k++) fprintf(stderr," ");
-        fprintf(stderr,"length = number of bits = %ld\n",s_v_li(a));
+        fprintf(stderr, "length = number of bits = %" PRIINT "\n" ,s_v_li(a));
         C_O_K(a,BITVECTOR);
         doffset -= 2L;
                 return(OK);
--- a/di.c
+++ b/di.c
@@ -1285,13 +1285,13 @@
 	m_il_nv(0L,FP);
 
     Ggen(G);
-	fprintf(stderr,"Gruppe erzeugt Ordnung %d\n",S_V_LI(G));
+	fprintf(stderr,"Gruppe erzeugt Ordnung %" PRIdPTR "\n" ,S_V_LI(G));
 
 	if(S_I_I(len) == 0L)
 		M_I_I(S_V_LI(G),len);
 
 	Canz = Cgen(G,C);
-	fprintf(stderr,"Konjugiertenklassen erzeugt Anzahl %d\n",Canz);
+	fprintf(stderr, "Konjugiertenklassen erzeugt Anzahl %" PRIINT "\n" ,Canz);
 	m_il_nv(Canz,Cdegrees);
 	Cdeg(C,Cdegrees);
 
@@ -1314,7 +1314,7 @@
 			Mggen(G,C,Cdegrees,weight,Mg);
 
 			MGgen(Mg,G,Cdegrees,MG);
-			printf("Anzahl Bahnrepraesentanten: %d\n",S_I_I(MG));
+			printf( "Anzahl Bahnrepraesentanten: %" PRIdPTR "\n" ,S_I_I(MG));
 
 			m_il_nv(S_V_LI(Cdegrees),propab);
 			build_propab_vector(propab,Cdegrees,G,MG,Mg);
--- a/ff.c
+++ b/ff.c
@@ -925,13 +925,13 @@
     Zeichen = (char *) SYM_calloc(500,sizeof(char));
     printeingabe("input of a finite field element");
     printeingabe("degree of extension");
-    scanf("%ld",&i);
+    scanf( "%" SCNINT ,&i);
     SYM_free((char *) Koerperelement);
     Koerperelement = (INT *) UE_malloc((i+1)*sizeof(INT));
     *Koerperzeiger = Koerperelement;
     for (j=(INT)0;j<=i;j++)
         Koerperelement[j] = (INT)0;
-    fprintf(stderr,"input   of %ld entries, separated by comma",i);
+    fprintf(stderr, "input   of %" PRIINT " entries, separated by comma" ,i);
     fprintf(stderr,"\nmissing entries are 0\n");
     scanf("%s",Zeichen);
     j = (INT)1;
@@ -1006,12 +1006,12 @@
     Koerperelement = *Koerperzeiger;
     for (i=(INT)1;i<Koerperelement[0];i++)
         {
-        fprintf(f,"%ld,",Koerperelement[i]);
+        fprintf(f, "%" PRIINT "," ,Koerperelement[i]);
         if (f == stdout) {
             zeilenposition += (intlog_int(Koerperelement[i])+1);
             }
         }
-    fprintf(f,"%ld",Koerperelement[Koerperelement[0]]);
+    fprintf(f, "%" PRIINT ,Koerperelement[Koerperelement[0]]);
     if (f == stdout) {
         zeilenposition += intlog_int(Koerperelement[Koerperelement[0]]);
         }
@@ -2069,7 +2069,7 @@
     fprintf(stderr,"ff:INT vektor =\n");
     for (i=(INT)0;i<doffset;i++) fputc(' ',stderr);
     for (i=(INT)0;i<= *iv;i++)
-        fprintf(stderr,"%ld ",*(iv+i));
+        fprintf(stderr, "%" PRIINT " " ,*(iv+i));
     fprintf(stderr,"\n");
     return OK;
 }
@@ -2165,10 +2165,10 @@
     CTO(FF,"objectwrite_ff(2)",a);
     {
     INT i,*ip;
-    fprintf(f,"%ld\n%ld\n%ld ", 
+    fprintf(f, "%" PRIINT "\n%ld\n%" PRIINT " " ,
               (INT)FF,S_FF_CI(a),S_FF_DI(a));
     ip = S_FF_IP(a);
-    for (i=0;i<S_FF_DI(a);i++) fprintf(f,"%ld ",ip[i+1]);
+    for (i=0;i<S_FF_DI(a);i++) fprintf(f,"%" PRIINT " ",ip[i+1]);
     fputc('\n',f);
     }
     ENDR("objectwrite_bruch");
@@ -2184,10 +2184,10 @@
     COP("objectread_ff(1)",f);
     {
     INT i,j,*ip;
-    fscanf(f,"%ld",&i);Charakteristik=i;
-    fscanf(f,"%ld",&i);UE_Erw_Grad=i;
+    fscanf(f, "%" SCNINT ,&i);Charakteristik=i;
+    fscanf(f, "%" SCNINT ,&i);UE_Erw_Grad=i;
     init_ff(a);ip = S_FF_IP(a);
-    for (j=0;j<UE_Erw_Grad;j++) { fscanf(f,"%ld",&i); ip[j+1]=i;}
+    for (j=0;j<UE_Erw_Grad;j++) { fscanf(f, "%" SCNINT ,&i); ip[j+1]=i;}
     ip[0]=UE_Erw_Grad;
     M_I_I(Charakteristik,S_V_I(a,0));
     }
@@ -2202,7 +2202,7 @@
 /* AK 040304 */
 {
     INT erg = OK,i,j;
-    sprintf(f,"[%d,",S_FF_CI(a)); i = strlen(f); f = f+i;
+    sprintf(f, "[%" PRIdPTR "," ,S_FF_CI(a)); i = strlen(f); f = f+i;
     for (i=0;i<S_FF_DI(a)-1;i++)  {
         sprintf(f,"%d,",S_FF_II(a,i));
         j=strlen(f);f=f+j;
--- a/ga.c
+++ b/ga.c
@@ -459,8 +459,8 @@
     OP zeiger = gral;
 
         {
-        fprintf(filename, " %d ",POLYNOM);
-        
+        fprintf(filename, " %" PRIOBJECTKIND " " ,POLYNOM);
+
         objectwrite(filename,S_PO_S(zeiger));
         objectwrite(filename,S_PO_K(zeiger));
         zeiger=S_PO_N(zeiger);
--- a/hiccup.c
+++ b/hiccup.c
@@ -3181,7 +3181,7 @@
 
 	for (i=0;i<ni;i++)
 	{
-		printf("%ldth square is ",i+1);
+		printf( "%" PRIINT "th square is " ,i+1);
 		switch (check_hecke_quadratic(s_v_i(vector,i),p_root,flag))
 		{
 		case 0:
@@ -3200,7 +3200,7 @@
 
 	for (i=1;i<ni;i++)
 	{
-		printf("%ldth braid is ",i);
+		printf( "%" PRIINT "th braid is " ,i);
 		switch (check_braid(s_v_i(vector,i-1),s_v_i(vector,i),p_root,flag))
 		{
 		case 0:
@@ -3220,7 +3220,7 @@
 	for (i=2;i<ni;i++)
 		for (j=0;j<i-1;j++)
 		{
-			printf("(%ld,%ld)th commute is ",i+1,j+1);
+			printf( "(%" PRIINT ",%" PRIINT ")th commute is " ,i+1,j+1);
 			switch (check_commute(s_v_i(vector,i),s_v_i(vector,j),p_root,flag))
 			{
 			case 0:
--- a/io.c
+++ b/io.c
@@ -730,7 +730,7 @@
     if (i++ == 4L)fprintf(stderr,"\n"),i=0L;
 
     fprintf(stderr,"\nwhat kind:? ");
-    scanf("%ld",&erg);
+    scanf( "%" SCNINT ,&erg);
     if (erg == 46) erg = BARPERM;
     return (OBJECTKIND)erg;
     }
@@ -746,7 +746,7 @@
     COP("objectread(2)",obj);
 
     FREESELF(obj);
-    i=fscanf(f,"%ld",&c);
+    i=fscanf(f, "%" SCNINT ,&c);
     SYMCHECK(i!=1,"objectread:could not read datatype");
     kind = (OBJECTKIND)c;
     switch(kind)
--- a/lo.c
+++ b/lo.c
@@ -421,7 +421,7 @@
     }
   if (cc) 
     {
-    fprintf(stderr,"cc=%ld %ld %ld %ld\n",cc,lx->w0,lx->w1,lx->w2);
+    fprintf(stderr, "cc=%" PRIINT " %" PRIINT " %" PRIINT " %" PRIINT " \n" ,cc,lx->w0,lx->w1,lx->w2);
     error("internal error:LO7");
     }
   return(c);
@@ -1512,7 +1512,7 @@
     char c;
     
 
-    fscanf(fp,"%ld",&i);
+    fscanf(fp, "%" SCNINT ,&i);
     if (i <(INT)0) 
         {
         sgn = (signed char)-1;
@@ -1521,7 +1521,7 @@
     ganzint(x,  i % gd.basis);
     while ((c=getc(fp)) == (char) gd.folgezeichen)
         {
-        fscanf(fp,"%ld",&i);
+        fscanf(fp, "%" SCNINT ,&i);
         if (i <(INT)0) 
             {
             return error("internal error LO14");
@@ -1572,11 +1572,11 @@
     else    {
         z = holeziffer(zd);
         if (zd->ziffernzahl > 0) zd->mehr=TRUE; else zd->mehr=FALSE;
-        sprintf(buffer,"%ld",z);
+        sprintf(buffer, "%" PRIINT ,z);
         f0 = gd.basislaenge-strlen(buffer);
         sprintf(zd->ziffer,"%s","000000000000");
             /* max. 12 Nullen */
-        sprintf(zd->ziffer + f0,"%ld",z);
+        sprintf(zd->ziffer + f0, "%" PRIINT ,z);
         if (zd->mehr == TRUE)
             {
 	    if (nofolgezeichen)
@@ -1648,12 +1648,12 @@
         if (zd->mehr == TRUE)
             {
 	    if (nofolgezeichen)
-		  sprintf(zd->ziffer,"%s%ld",zd->ziffer,z);
+		  sprintf(zd->ziffer, "%s%" PRIINT ,zd->ziffer,z);
             else 
-		  sprintf(zd->ziffer,"%s%ld%c",zd->ziffer,z,gd.folgezeichen);
+		  sprintf(zd->ziffer, "%s%" PRIINT "%c" ,zd->ziffer,z,gd.folgezeichen);
             }
         else    
-          sprintf(zd->ziffer,"%s%ld",zd->ziffer,z);
+          sprintf(zd->ziffer, "%s%" PRIINT ,zd->ziffer,z);
         }
     locrette(& xx.floc);
     return(OK);
@@ -4340,16 +4340,16 @@
     for (k=0L;k<doffset;k++) fprintf(stderr," ");
     fprintf(stderr,"kind:22=longint\n");
     for (k=0L;k<doffset;k++) fprintf(stderr," ");
-    fprintf(stderr,"laenge = %ld\n",
+    fprintf(stderr, "laenge = %" PRIINT "\n" ,
         c.ob_longint->laenge);
     for (k=0L;k<doffset;k++) fprintf(stderr," ");
-    fprintf(stderr,"signum = %d\n",
+    fprintf(stderr, "signum = %" PRIINT "\n" ,
         c.ob_longint->signum);
     alocx = c.ob_longint->floc; /* AK 071294 */
     while (alocx != NULL)
         {
         for (k=0L;k<doffset;k++) fprintf(stderr," ");
-        fprintf(stderr,"%ld %ld %ld\n",alocx->w0,alocx->w1,alocx->w2);
+        fprintf(stderr, "%" PRIINT " %" PRIINT " %" PRIINT "\n" ,alocx->w0,alocx->w1,alocx->w2);
         alocx= alocx->nloc;
         }
     return(OK);
--- a/ma.c
+++ b/ma.c
@@ -611,11 +611,11 @@
             err = error("m_ilih_m:self == NULL ");
             if (err==ERROR_EXPLAIN) 
                 fprintf(stderr,
-                        "I wanted a %ld  x %ld matrix", 
+                        "I wanted a %" PRIINT "  x %" PRIINT " matrix" ,
                         len,
                         height
-                       ); 
-            if (err==ERROR_RETRY) 
+                       );
+            if (err==ERROR_RETRY)
                 goto ma;
             }
         }
@@ -1631,25 +1631,25 @@
     if (i < (INT)0)
         {
         debugprint(a);
-        fprintf(stderr,"index = %ld\n",i);
+        fprintf(stderr, "index = %" PRIINT "\n" ,i);
         error("s_m_ij:row index too small");
         }
     if (i >= s_m_hi(a))
         {
         debugprint(a);
-        fprintf(stderr,"index = %ld\n",i);
+        fprintf(stderr, "index = %" PRIINT "\n" ,i);
         error("s_m_ij:row index too big");
         }
     if (j >= s_m_li(a))
         {
         debugprint(a);
-        fprintf(stderr,"index = %ld\n",j);
+        fprintf(stderr, "index = %" PRIINT "\n" ,j);
         error("s_m_ij:column index too big");
         }
     if (j < (INT)0)
         {
         debugprint(a);
-        fprintf(stderr,"index = %ld\n",j);
+        fprintf(stderr, "index = %" PRIINT "\n" ,j);
         error("s_m_ij:column index too small");
         }
     return(s_m_s(a) + (s_m_li(a)*i+j) ); 
--- a/mo.c
+++ b/mo.c
@@ -3017,7 +3017,7 @@
 	info[1]=pz;
 	info[2]=row;
 	info[3]=col;
-	fprintf(dfp,"%ld %ld %ld %ld \n ",info[0],info[1],info[2],info[3]);
+	fprintf(dfp, "%" PRIINT " %" PRIINT " %" PRIINT " %" PRIINT " \n " ,info[0],info[1],info[2],info[3]);
 	j = info[2] * info[3];
 	for (i=(INT)0; i<j;i++)
 		fprintf(dfp,"%d ",(int)decomp[i]);
@@ -3373,7 +3373,7 @@
 		SYM_free(part);
 		SYM_free(darmat[0]); /* AK 020692 statt free(darmat) */
 		SYM_free(darmat[1]); /* AK 020692 statt free(darmat) */
-		fprintf(stderr,"error-no = %ld\n",dim);
+		fprintf(stderr, "error-no = %" PRIINT "\n" ,dim);
 		return error("mo.c: internal MO-15");
 	}
 	m_ilih_m(dim,dim,dmat);
--- a/nb.c
+++ b/nb.c
@@ -1402,10 +1402,10 @@
 /* AK 200891 V1.3 */
 {
 #ifdef NUMBERTRUE
-    fprintf(f," %ld\n",(INT)S_O_K(number));
+    fprintf(f, " %" PRIINT "\n" ,(INT)S_O_K(number));
     objectwrite(f,S_N_S(number));
     switch (S_O_K(number))
-    {    
+    {
     case    SQ_RADICAL:
         objectwrite(f,S_N_D(number));
         break;
@@ -1657,7 +1657,7 @@
 {
 #ifdef CYCLOTRUE
     if (number_mem != 0L)
-        fprintf(stderr,"error in number memory %ld\n",number_mem);
+        fprintf(stderr, "error in number memory %" PRIINT "\n" ,number_mem);
     return OK;
 #endif
 }
@@ -1933,7 +1933,7 @@
 /* 04.06.90: TPMcD. */ /* 1.04.91: TPMcD. */
 /* AK 200891 V1.3 */ /* 23.10.91: TPMcD */
 {    
-    INT    ret = ERROR; 
+    INT    ret = ERROR;
     INT    i,n;
 # ifdef    MONOPOLYTRUE
     OP    x = CALLOCOBJECT(), y = CALLOCOBJECT(), z;
@@ -1941,13 +1941,13 @@
 
     init(MONOPOLY,result);
     printeingabe("Length of list: ");  /* AK 080891 */
-    scanf("%ld",&n);
+    scanf( "%" PRIINT ,&n);
     for (i=0L;i<n;i++)
-    {    
-        sprintf(a,"%ld-th monomial (self) ",i);
+    {
+        sprintf(a, "%" PRIINT "-th monomial (self) " ,i);
         printeingabe(a);
         scan(self_type,x);
-        sprintf(a,"%ld-th monomial (koeff) ",i);
+        sprintf(a, "%" PRIINT "-th monomial (koeff) " ,i);
         printeingabe(a);
         scan(coeff_type,y);
         if (nullp(y))
@@ -4901,17 +4901,17 @@
         if (strlen(name) == 0)
             return(ERROR);
         if ((f = fopen(name,"r")) == NULL)
-        {    
+        {
             printf("Unable to open %s\n",name);
             return(ERROR);
         }
     }
-    if ( fscanf(f," %ld",&zzno_cyclos) == 0 || zzno_cyclos < 1L ||
+    if ( fscanf(f, " %" PRIINT ,&zzno_cyclos) == 0 || zzno_cyclos < 1L ||
         (zzcyclo_table
         = (CYCLO_DATA *) SYM_calloc((int)zzno_cyclos,sizeof(CYCLO_DATA))
         ) == NULL
         )
-    {    
+    {
         zzno_cyclos    = 0L;
         printf("\nCyclo data table creation error");
         return(ERROR);
@@ -5071,17 +5071,17 @@
 
 INT print_cyclo_table()
 /* AK 200891 V1.3 */
-{    
+{
     CYCLO_DATA    *ptr;
     INT    i;
 
     if (!cyclo_table_set)
         return(ERROR);
-    printf("Number of cyclo data on table: %ld\n",zzno_cyclos);
+    printf( "Number of cyclo data on table: %" PRIINT "\n" ,zzno_cyclos);
     ptr    = zzcyclo_table;
     for (i=0L;i<zzno_cyclos;i++)
-    {    
-        printf("Table item %ld: ",i);
+    {
+        printf( "Table item %" PRIINT ": " ,i);
         print_cyclo_data(ptr);
         ptr++;
     }
@@ -5099,8 +5099,8 @@
     printf("Cyclo data in list:\n");
     list_ptr    = zzcyclo_list;
     while (list_ptr != NULL)
-    {    
-        printf("List item %ld: ",i++);
+    {
+        printf( "List item %" PRIINT ": " ,i++);
         print_cyclo_data((CYCLO_DATA *) S_L_S(list_ptr));
         list_ptr    = S_L_N(list_ptr);
     }
@@ -5145,21 +5145,21 @@
     else
         strcpy(name,filename);
     if (new)
-    {    
+    {
         fprintf(f,"              \n\n");
         printf("Initialising %s\n",name);
         i    = 0L;
     }
     else
-    {    
+    {
         fseek(f,0L,0);
-        fscanf(f,"%ld",&i);
+        fscanf(f, "%" SCNINT ,&i);
         fseek(f,0L,2);
         printf("Cyclo data being appended to file %s.\n",name);
     }
     list_ptr    = zzcyclo_list;
     while (list_ptr != NULL)
-    {    
+    {
         ptr    = (CYCLO_DATA *) S_L_S(list_ptr);
         fprintf(f,"\n");
         objectwrite(f,ptr->index);
@@ -5170,7 +5170,7 @@
         i++;
     }
     fseek(f,0L,0);
-    fprintf(f,"%8ld",i);
+    fprintf(f, "%8" PRIINT ,i);
     fclose(f);
     return(OK);
 }
--- a/part.c
+++ b/part.c
@@ -2312,7 +2312,7 @@
     if (no_banner != TRUE)
     if (mem_counter_part != (INT)0)
         {
-        fprintf(stderr,"mem_counter_part = %ld\n",mem_counter_part);
+        fprintf(stderr, "mem_counter_part = %" PRIINT "\n" ,mem_counter_part);
         erg += error("memory problem with partitions");
         }
 
@@ -3115,7 +3115,7 @@
     INT erg = OK;
     COP("objectread_partition(1)",filename);
     COP("objectread_partition(2)",part);
-    fscanf(filename,"%ld",&kind);
+    fscanf(filename, "%" SCNINT ,&kind);
     erg += b_ks_pa((OBJECTKIND)kind, callocobject(),part);
     erg += objectread(filename,S_PA_S(part));
     if (S_PA_K(part) == VECTOR) 
@@ -3132,8 +3132,8 @@
     INT erg = OK;
     COP("objectwrite_partition(1)",filename);
     COP("objectwrite_partition(2)",part);
-    fprintf(filename,"%ld\n",(INT)PARTITION);
-    fprintf(filename,"%ld\n",(INT)S_PA_K(part));
+    fprintf(filename, "%" PRIINT "\n" ,(INT)PARTITION);
+    fprintf(filename, "%" PRIINT "\n",(INT)S_PA_K(part));
     erg += objectwrite(filename,S_PA_S(part));
     ENDR("objectwrite_partition");
 }
--- a/perm.c
+++ b/perm.c
@@ -123,7 +123,7 @@
     erg += freeall(old_kranz_tafel);
     if (mem_counter_perm != 0L)
         {
-        fprintf(stderr,"mem_counter_perm = %ld\n",mem_counter_perm);
+        fprintf(stderr, "mem_counter_perm = %" PRIINT "\n" ,mem_counter_perm);
         erg += error("permutation memory not freed");
         }
     if (next_perm_v != NULL)
@@ -2537,7 +2537,7 @@
     CTO(EMPTY,"objectwrite_permutation(2)",perm);
 
     erg += b_ks_p((OBJECTKIND)0, callocobject(),perm);
-    fscanf(filename,"%ld",&i); kind = (OBJECTKIND)i;
+    fscanf(filename, "%" SCNINT ,&i); kind = (OBJECTKIND)i;
     C_P_K(perm,kind);
     erg += objectread(filename,S_P_S(perm));
     ENDR("objectread_permutation");
@@ -2552,8 +2552,8 @@
     COP("objectwrite_permutation(1)",filename);
     CTO(PERMUTATION,"objectwrite_permutation(2)",perm);
 
-    fprintf(filename,"%ld\n",(INT)PERMUTATION);
-    fprintf(filename,"%ld\n",(INT)S_P_K(perm));
+    fprintf(filename, "%" PRIINT "\n" ,(INT)PERMUTATION);
+    fprintf(filename, "%" PRIINT "\n" ,(INT)S_P_K(perm));
     erg += objectwrite(filename,S_P_S(perm));
     ENDR("objectwrite_permutation");
 }
--- a/poly.c
+++ b/poly.c
@@ -297,9 +297,9 @@
 {
     INT erg = OK;
     COP("objectwrite_monom(1)",f);
-    fprintf(f,"%ld ",(INT)MONOM);
-    erg += objectwrite(f,S_MO_K(a)); 
-    erg += objectwrite(f,S_MO_S(a)); 
+    fprintf(f, "%" PRIINT " " ,(INT)MONOM);
+    erg += objectwrite(f,S_MO_K(a));
+    erg += objectwrite(f,S_MO_S(a));
     ENDR("objectwrite_monom");
 }
 
@@ -2029,10 +2029,10 @@
                 {
                 hbool=(INT)0;
                 if (S_M_IJI(z,i,j) >1L)
-                    fprintf(texout," x_{%ld,%ld}^{%ld} ",
+                    fprintf(texout, " x_{%" PRIINT ",%" PRIINT "}^{%" PRIdPTR "} " ,
                         i,j,S_M_IJI(z,i,j));
-                else 
-                    fprintf(texout," x_{%ld,%ld} ", i,j);
+                else
+                    fprintf(texout, " x_{%" PRIINT ",%" PRIINT "} " , i,j);
                 texposition += 15L;
                 }
             }
@@ -2042,7 +2042,7 @@
             {
                 hbool=(INT)0;
                 if (tex_poly_var == NUMERICAL) /* AK 090395 */
-            fprintf(texout,"x_{%ld}",i+tex_poly_first_var_index);
+            fprintf(texout, "x_{%" PRIINT "}" ,i+tex_poly_first_var_index);
                 else
             fprintf(texout,"%c",(char)( 'a'+i+tex_poly_first_var_index));
                 texposition ++;
@@ -2948,7 +2948,7 @@
         for (i= 0L ;i < S_PO_SLI(zeiger); i++)
             if (S_PO_SII(zeiger,i) > 0L)
             {
-                fprintf(texout,"*x%ld",i+1);
+                fprintf(texout, "*x%" PRIINT ,i+1);
                 texposition ++;
                 if (S_PO_SII(zeiger,i) != 1L)
                     {
--- a/rest.c
+++ b/rest.c
@@ -14,7 +14,7 @@
 
 
 INT callocobject_anfang()
-{        
+{
     return OK;
 }
 
@@ -432,7 +432,7 @@
 /* AK 170698 V2.0 */
     {
     INT err;
-    fprintf(stderr,"function: %s code: %ld \n",t,code);
+    fprintf(stderr, "function: %s code: %" PRIINT " \n" ,t,code);
     err = error("error during computation");
     return ERROR;
     }
@@ -2625,18 +2625,18 @@
     INT eingabe;
     INT erg = OK;
     COP("objectread_integer(1)",filename);
-    fscanf(filename,"%ld",&eingabe); 
-    M_I_I(eingabe,obj); 
+    fscanf(filename, "%" SCNINT ,&eingabe);
+    M_I_I(eingabe,obj);
     ENDR("objectread_integer");
     }
 
 INT objectwrite_integer(filename,obj) FILE *filename; OP obj;
 /* AK 131086 */ /* AK 270689 V1.0 */ /* AK 181289 V1.1 */
 /* AK 210891 V1.3 */
-    { 
+    {
     INT erg = OK;
     COP("objectwrite_integer(1)",filename);
-    fprintf(filename," %ld %ld\n",(INT)INTEGER,S_I_I(obj)); 
+    fprintf(filename, " %" PRIINT " %ld\n" ,(INT)INTEGER,S_I_I(obj));
     ENDR("objectwrite_integer");
     }
 
@@ -2748,11 +2748,11 @@
     println(b);
     printf("test_integer:comp_integer_integer(a,b)\n");
     erg=comp_integer_integer(a,b);
-    printf("%ld\n",erg);
+    printf( "%" PRIINT "\n" ,erg);
     printf("test_integer:binom(a=5L,b=4L,c)\n");
-    m_i_i(5L,a); 
-    m_i_i(4L,b); 
-    binom(a,b,c); 
+    m_i_i(5L,a);
+    m_i_i(4L,b);
+    binom(a,b,c);
     println(c);
     freeall(a);
     freeall(b);
@@ -3178,11 +3178,11 @@
             erg += init_hashtable(a);
             break;
 #endif /* VECTORTRUE */
-        default: 
-            fprintf(stderr,"kind = %ld\n",(INT) kind);
+        default:
+            fprintf(stderr, "kind = %" PRIINT "\n" ,(INT) kind);
             return error("init:wrong kind");
         }
-    
+
     CTO(kind,"init(e2)",a);
     ENDR("init");
 }
@@ -3546,23 +3546,23 @@
 
 INT emptyp(a) OP a;
 /* AK 270689 V1.0 */ /* AK 181289 V1.1 */ /* AK 210891 V1.3 */
-    { 
-    return(s_o_k(a) == EMPTY); 
+    {
+    return(s_o_k(a) == EMPTY);
     }
 
 INT test_callocobject()
 /* AK 270689 V1.0 */ /* AK 181289 V1.1 */ /* AK 210891 V1.3 */
     {
     OP a = callocobject();
-    printf("test_callocobject: sizeof(OP)=%d\n",sizeof(a));
-    printf("test_callocobject: sizeof(*OP)=%d\n",sizeof(*a));
-    printf("test_callocobject: sizeof(struct object)=%d\n",sizeof(struct object));
+    printf("test_callocobject: sizeof(OP)=%zu\n",sizeof(a));
+    printf("test_callocobject: sizeof(*OP)=%zu\n",sizeof(*a));
+    printf("test_callocobject: sizeof(struct object)=%zu\n",sizeof(struct object));
     if (a==NULL) {
         printf("test_callocobject: NULL-object");return(OK);
         }
-    printf("test_callocobject: a=%ld\n",(INT)a);
-    printf("test_callocobject: a->ob_kind=%ld\n",(INT) (a->ob_kind));
-    printf("test_callocobject: a->ob_self.ob_INT=%ld\n",
+    printf("test_callocobject: a=%p\n",a);
+    printf( "test_callocobject: a->ob_kind=%" PRIOBJECTKIND "\n" ,a->ob_kind);
+    printf( "test_callocobject: a->ob_self.ob_INT=%" PRIdPTR " \n" ,
                         (a->ob_self).ob_INT);
     SYM_free(a);
     return(OK);
@@ -3573,9 +3573,9 @@
     {
     if (a==NULL) {
     fprintf(stderr,"debugprint_object: NULL-object");return(OK);}
-    fprintf(stderr,"debugprint_object: a=%ld\n",(INT)a);
-    fprintf(stderr,"debugprint_object: kind=%ld\n",(INT)a->ob_kind);
-    fprintf(stderr,"debugprint_object: self.INT=%ld\n",a->ob_self.ob_INT);
+    fprintf(stderr,"debugprint_object: a=%p\n",a);
+    fprintf(stderr, "debugprint_object: kind=%" PRIOBJECTKIND "\n" ,a->ob_kind);
+    fprintf(stderr, "debugprint_object: self.INT=%" PRIdPTR "\n" ,a->ob_self.ob_INT);
     return(OK);
     }
 
@@ -3775,7 +3775,7 @@
     {
     INT erg = OK;
     COP("objectwrite_skewpartition(1)",f);
-    fprintf(f, "%ld ", (INT)SKEWPARTITION);
+    fprintf(f, "%" PRIINT " ", (INT)SKEWPARTITION);
     erg += objectwrite(f,S_SPA_G(a));
     erg += objectwrite(f,s_spa_k(a));
     ENDR("objectwrite_skewpartition");
@@ -4640,7 +4640,7 @@
   INT l,erg=OK;
   INT i;
   erg += printeingabe("length of vector ");
-  scanf("%ld",&l);
+  scanf( "%" SCNINT ,&l);
   if(l<2L)
   {
     erg+= m_il_nla(2L,ergebnis);
--- a/rh.c
+++ b/rh.c
@@ -179,7 +179,7 @@
 static int free_drei(a) char *a; { SYM_free(a); }
 static int free_zwei(a) char *a; { SYM_free(a); }
 static int free_eins(a) char *a; { SYM_free(a); }
-static int free_null_debug(a) char *a; { printf("free_null:%ld\n",a); SYM_free(a); }
+static int free_null_debug(a) char *a; { printf("free_null:%p\n",a); SYM_free(a); }
 static int free_null(a) char *a; { SYM_free(a); }
 
 static struct REIHE_mon *new_zwei()
@@ -200,7 +200,7 @@
 static struct reihe *new_null_debug() { 
    struct reihe *a;
    a = (struct reihe*) SYM_calloc(1,sizeof(struct reihe)); 
-   printf("new_null:%ld\n",a);
+   printf("new_null:%p\n",a);
    return a; }
 
 static INT initial_reihe(adress) REIHE_zeiger* adress;
@@ -1160,7 +1160,7 @@
          do
          {
             if (zeigvar->potenz>0L)
-               fprintf(f," X%ld^%ld",zeigvar->index,zeigvar->potenz);
+               fprintf(f, " X%" PRIINT "^%" PRIINT ,zeigvar->index,zeigvar->potenz);
 	if (f == stdout) zeilenposition+=5L; /* AK 040893 */
             zeigvar=zeigvar->weiter;
 
@@ -2288,13 +2288,13 @@
       return    fprintf(stderr,"struct reihe==NULL\n");
       }
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"exist = %ld\n",a->exist);
+   fprintf(stderr, "exist = %" PRIINT "\n" ,a->exist);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"reihenart = %ld\n",a->reihenart);
+   fprintf(stderr, "reihenart = %" PRIINT "\n" ,a->reihenart);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"z = %ld\n",a->z);
+   fprintf(stderr, "z = %" PRIINT "\n" ,a->z);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"x = \n"); 
+   fprintf(stderr,"x = \n");
    doffset += 2L;
    debugprint_rh(a->x);
    doffset -= 2L;
@@ -2328,14 +2328,14 @@
       return    fprintf(stderr,"struct reihe_poly==NULL\n");
       }
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"grad = %ld\n",a->grad);
+   fprintf(stderr, "grad = %" PRIINT "\n" ,a->grad);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"unten = \n"); 
+   fprintf(stderr,"unten = \n");
    doffset += 2L;
    debugprint_rh_mon(a->unten);
    doffset -= 2L;
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"rechts = \n"); 
+   fprintf(stderr,"rechts = \n");
    doffset += 2L;
    debugprint_rh_poly(a->rechts);
    doffset -= 2L;
@@ -2379,11 +2379,11 @@
       return    fprintf(stderr,"struct reihe_var==NULL\n");
       }
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"index = %ld\n",a->index);
+   fprintf(stderr, "index = %" PRIINT "\n" ,a->index);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"potenz = %ld\n",a->potenz);
+   fprintf(stderr, "potenz = %" PRIINT "\n" ,a->potenz);
    for (i=0L;i<doffset;i++) fputc(' ',stderr);
-   fprintf(stderr,"weiter = \n"); 
+   fprintf(stderr,"weiter = \n");
    doffset += 2L;
    debugprint_rh_var(a->weiter);
    doffset -= 2L;
--- a/sb.c
+++ b/sb.c
@@ -1414,16 +1414,16 @@
         tex (S_PO_K(z));
         for (i=0L,k=0,j=0;i<S_PO_SLI(z);i++)
             {
-            
+
             if (S_PO_SII(z,i) == (INT)1)
                 {
-                fprintf(texout,"$ (x_%ld - y_%ld) $ ",j,k-j);
+                fprintf(texout, "$ (x_%" PRIINT " - y_%" PRIINT ") $ " ,j,k-j);
                 texposition += (INT)10;
                 }
             else
             if (S_PO_SII(z,i) > (INT)1)
                 {
-                fprintf(texout,"$ (x_%ld - y_%ld)^%ld $ ",j,k-j,S_PO_SII(z,i));
+                fprintf(texout, "$ (x_%" PRIINT " - y_%" PRIINT ")^%" PRIdPTR " $ " ,j,k-j,S_PO_SII(z,i));
                 texposition += (INT)10;
                 }
 
--- a/sc.c
+++ b/sc.c
@@ -1329,7 +1329,7 @@
 /* AK 260291 V1.2 */ /* AK 200891 V1.3 */
     {
     INT erg=OK;
-    fprintf(fp,"%ld\n",(INT)SYMCHAR);
+    fprintf(fp, "%" PRIINT "\n" ,(INT)SYMCHAR);
     erg += objectwrite(fp,S_SC_D(a));
     erg += objectwrite(fp,S_SC_P(a));
     erg += objectwrite(fp,S_SC_W(a));
--- a/ta.c
+++ b/ta.c
@@ -29,7 +29,7 @@
     INT erg = OK;
     if (mem_counter_tab != 0L)
         {
-        fprintf(stderr,"mem_counter_tab = %ld\n",mem_counter_tab);
+        fprintf(stderr, "mem_counter_tab = %" PRIINT "\n" ,mem_counter_tab);
         erg += error("tab memory not freed");
         }
     return erg;
@@ -313,7 +313,7 @@
     INT erg = OK;
     CTO(TABLEAUX,"objectwrite_tableaux(2)",a);
     COP("objectwrite_tableaux(1)",f);
-    fprintf(f,"%ld ",(INT)S_O_K(a));
+    fprintf(f, "%" PRIINT " " ,(INT)S_O_K(a));
     erg += objectwrite(f,S_T_U(a));
     erg += objectwrite(f,S_T_S(a));
     ENDR("objectwrite_tableaux");
@@ -460,17 +460,17 @@
                 fprintf(texout,"\\vrule height10pt depth3pt$");
 /* s_t_iji statt S_T_IJI */
             if (s_t_iji(a,S_PA_LI(S_T_U(a))-1-i,j) < 10L)
-                fprintf(texout,"\\ %ld",
+                fprintf(texout, "\\ %" PRIINT ,
 /* s_t_iji statt S_T_IJI */
                     s_t_iji(a,S_PA_LI(S_T_U(a))-1-i,j));
 /* s_t_iji statt S_T_IJI */
             else if (s_t_iji(a,S_PA_LI(S_T_U(a))-1-i,j) < 100L)
-                fprintf(texout,"%ld",
+                fprintf(texout, "%" PRIINT ,
 /* s_t_iji statt S_T_IJI */
                     s_t_iji(a,S_PA_LI(S_T_U(a))-1-i,j));
             else return
             error("tex_tableaux:entry too big in tableaux");
-                    
+
                 fprintf(texout,
                     "$ \\vrule height10pt depth3pt}\n");
                 }
--- a/vc.c
+++ b/vc.c
@@ -1,4 +1,4 @@
-#include "def.h" 
+#include "def.h"
 #include "macro.h"
 
 /* SYMMETRICA vector.c */
@@ -47,7 +47,7 @@
     if (no_banner != TRUE)
     if (mem_counter_vec != (INT)0)
         {
-        fprintf(stderr,"mem_counter_vec = %ld\n",mem_counter_vec);
+        fprintf(stderr, "mem_counter_vec = %" PRIINT "\n" ,mem_counter_vec);
         erg += error("vec memory not freed");
         }
 #ifdef UNDEF
@@ -1453,32 +1453,32 @@
     return erg;
 }
 
-OP s_v_i(a,i) OP a; INT i; 
+OP s_v_i(a,i) OP a; INT i;
 /* AK 270689 V1.0 */ /* AK 201289 V1.1 */ /* AK 180691 V1.2 */
 /* AK 200891 V1.3 */
 /* AK 011098 V2.0 */
 {
     INT j;
-    if (i<(INT)0) 
-        { 
-        fprintf(stderr,"index = %ld\n",i);
-        error("s_v_i:negative index"); 
-        return(NULL); 
+    if (i<(INT)0)
+        {
+        fprintf(stderr, "index = %" PRIINT "\n" ,i);
+        error("s_v_i:negative index");
+        return(NULL);
         }
     if (s_o_k(a) == HASHTABLE)
         {
-        if (i > (j=s_v_li(a)) ) 
-        { 
-        fprintf(stderr,"index = %ld dimension = %ld\n",i,j);
-        error("s_v_i hashtable:index too big"); 
-        return(NULL); 
+        if (i > (j=s_v_li(a)) )
+        {
+        fprintf(stderr, "index = %" PRIINT " dimension = %" PRIINT "\n" ,i,j);
+        error("s_v_i hashtable:index too big");
+        return(NULL);
         }
         }
-    else if (i >= (j=s_v_li(a)) ) 
-        { 
-        fprintf(stderr,"index = %ld dimension = %ld\n",i,j);
-        error("s_v_i:index too big"); 
-        return(NULL); 
+    else if (i >= (j=s_v_li(a)) )
+        {
+        fprintf(stderr, "index = %" PRIINT " dimension = %" PRIINT "\n" ,i,j);
+        error("s_v_i:index too big");
+        return(NULL);
         }
     return(s_v_s(a) + (i));
 }
--- a/zykelind.c
+++ b/zykelind.c
@@ -4241,12 +4241,12 @@
         printf(" ");
       }
       for (i=0L;i<S_V_LI(S_PO_S(monom));++i)
-      if (!nullp(S_V_I(S_PO_S(monom),i))) 
+      if (!nullp(S_V_I(S_PO_S(monom),i)))
       {
-        if (!einsp(S_V_I(S_PO_S(monom),i))) 
-        printf("x_{%d}^{%d}\n",i+1L,S_V_II(S_PO_S(monom),i));
+        if (!einsp(S_V_I(S_PO_S(monom),i)))
+        printf( "x_{%" PRIINT "}^{%" PRIuPTR "}\n" ,i+1,S_V_II(S_PO_S(monom),i));
         else
-        printf("x_{%d}\n",i+1L);
+        printf( "x_{%" PRIINT "}\n" ,i+1);
       }
       if (S_PO_N(monom)!=NULL) printf("+");
       monom=S_PO_N(monom);
--- a/list.c
+++ b/list.c
@@ -31,7 +31,7 @@
     if (no_banner != TRUE)
     if (mem_counter_list != 0L)
         {
-        fprintf(stderr,"mem_counter_list = %ld\n",mem_counter_list);
+        fprintf(stderr, "mem_counter_list = %" PRIINT "\n" ,mem_counter_list);
         erg += error("list memory not freed");
         goto endr_ende;
         }
@@ -1122,26 +1122,26 @@
     ENDR("insert_list_list");
 }
 
-#ifdef LISTTRUE 
+#ifdef LISTTRUE
 INT objectwrite_list(f,a) FILE *f; OP a;
 /* AK 210690 V1.1 */ /* AK 100591 V1.2 */
 /* AK 060891 V1.3 */
 {
-    fprintf(f,"%ld ", (INT)S_O_K(a));
+    fprintf(f, "%" PRIINT " " , (INT)S_O_K(a));
     if (S_L_S(a) == NULL) /* 100591 */
         fprintf(f,"%ld\n",0L);
     else    {
         fprintf(f,"%ld\n",1L);
         objectwrite(f,S_L_S(a));
         }
-    if (S_L_N(a) == NULL) 
+    if (S_L_N(a) == NULL)
         {
         fprintf(f,"%ld\n",0L);
         return OK;
         }
-    else    { 
-        fprintf(f,"%ld\n",1L); 
-        return objectwrite(f,S_L_N(a)); 
+    else    {
+        fprintf(f,"%ld\n",1L);
+        return objectwrite(f,S_L_N(a));
         }
 }
 
@@ -1151,20 +1151,20 @@
 /* AK 060891 V1.3 */
 {
     INT i;
-    fscanf(f,"%ld",&i);
-    if (i == 0L) 
+    fscanf(f, "%" SCNINT ,&i);
+    if (i == 0)
         b_sn_l(NULL,NULL,a);
-    else if (i == 1L)
+    else if (i == 1)
         {
         b_sn_l(callocobject(),NULL,a);
         objectread(f,S_L_S(a));
         }
     else
         return error("objectread_list: wrong format (1) ");
-    fscanf(f,"%ld",&i);
-    if (i == 0L) 
+    fscanf(f, "%" SCNINT ,&i);
+    if (i == 0L)
         return OK;
-    else if (i == 1L) 
+    else if (i == 1L)
         {
         C_L_N(a,callocobject());
         return objectread(f,S_L_N(a)); 
