diff -Naur simgear-2017.2.1/simgear/math/simd.hxx simgear-2017.2.1.noneon/simgear/math/simd.hxx
--- simgear-2017.2.1/simgear/math/simd.hxx	2017-05-21 06:57:58.000000000 +0000
+++ simgear-2017.2.1.noneon/simgear/math/simd.hxx	2017-10-05 00:10:47.253155347 +0000
@@ -32,9 +32,6 @@
 # include <intrin.h>
 #elif defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
 # include <x86intrin.h>
-#elif defined(__GNUC__) && defined(__ARM_NEON__)
-# include <arm_neon.h>
-# include <simgear/math/simd_neon.hxx>
 #endif
 
 #include <simgear/math/SGLimits.hxx>
diff -Naur simgear-2017.2.1/simgear/math/simd4x4.hxx simgear-2017.2.1.noneon/simgear/math/simd4x4.hxx
--- simgear-2017.2.1/simgear/math/simd4x4.hxx	2017-05-21 06:57:58.000000000 +0000
+++ simgear-2017.2.1.noneon/simgear/math/simd4x4.hxx	2017-10-05 00:10:32.725286075 +0000
@@ -24,10 +24,6 @@
 # include <simgear/simgear_config.h>
 #endif
 
-#if defined(__GNUC__) && defined(__ARM_NEON__)
-# include <simgear/math/simd4x4_neon.hxx>
-#endif
-
 #include <simgear/math/simd.hxx>
 
 template<typename T, int N> class simd4x4_t;
diff -Naur simgear-2017.2.1/simgear/math/simd4x4_neon.hxx simgear-2017.2.1.noneon/simgear/math/simd4x4_neon.hxx
--- simgear-2017.2.1/simgear/math/simd4x4_neon.hxx	2017-05-21 06:57:58.000000000 +0000
+++ simgear-2017.2.1.noneon/simgear/math/simd4x4_neon.hxx	1970-01-01 00:00:00.000000000 +0000
@@ -1,706 +0,0 @@
-// Copyright (C) 2016 Erik Hofman - erik@ehofman.com
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Library General Public
-// License as published by the Free Software Foundation; either
-// version 2 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Library General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-//
-
-#ifndef __SIMD4X4_NEON_H__
-#define __SIMD4X4_NEON_H__	1
-
-#include "simd_neon.hxx"
-
-#ifdef __ARM_NEON__
-template<>
-class simd4x4_t<float,4>
-{
-private:
-    typedef float  __mtx4f_t[4][4];
-
-    union alignas(16) {
-        float32x4_t simd4x4[4];
-        __mtx4f_t mtx;
-        float array[4*4];
-    }g;
-
-public:
-    simd4x4_t(void) {}
-    simd4x4_t(float m00, float m01, float m02, float m03,
-              float m10, float m11, float m12, float m13,
-              float m20, float m21, float m22, float m23,
-              float m30, float m31, float m32, float m33)
-    {
-        array[0] = m00; array[1] = m10;
-        array[2] = m20; array[3] = m30;
-        array[4] = m01; array[5] = m11;
-        array[6] = m21; array[7] = m31;
-        array[8] = m02; array[9] = m12;
-        array[10] = m22; array[11] = m32;
-        array[12] = m03; array[13] = m13;
-        array[14] = m23; array[15] = m33;
-    }
-    simd4x4_t(const float m[4*4]) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<float,4>((const float*)&m[4*i]).v4();
-        }
-    }
-
-    explicit simd4x4_t(const __mtx4f_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<float,4>(m[i]).v4();
-        }
-    }
-    simd4x4_t(const simd4x4_t<float,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-    }
-    ~simd4x4_t(void) {}
-
-    inline float32x4_t (&m4x4(void))[4] {
-        return simd4x4;
-    }
-
-    inline const float32x4_t (&m4x4(void) const)[4] {
-        return simd4x4;
-    }
-    
-    inline const float (&ptr(void) const)[4][4] {
-        return mtx;
-    }
-
-    inline float (&ptr(void))[4][4] {
-        return mtx;
-    }
-
-    inline operator const float*(void) const {
-        return array;
-    }
-
-    inline operator float*(void) {
-        return array;
-    }
-
-    template<int M>
-    inline void set(int i, const simd4_t<float,M>& v) {
-        simd4x4[i] = v.v4();
-    }
-
-    inline simd4x4_t<float,4>& operator=(const __mtx4f_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<float,4>(m[i]).v4();
-        }
-        return *this;
-    }
-    inline simd4x4_t<float,4>& operator=(const simd4x4_t<float,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<float,4>& operator+=(const simd4x4_t<float,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = vaddq_f32(simd4x4[i], m.m4x4()[i]);
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<float,4>& operator-=(const simd4x4_t<float,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = vsubq_f32(simd4x4[i], m.m4x4()[i]);
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<float,4>& operator*=(float f) {
-        simd4_t<float,4> f4(f);
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = vmulq_f32(simd4x4[i], f4.v4());
-        }
-        return *this;
-    }
-
-    simd4x4_t<float,4>& operator*=(const simd4x4_t<float,4>& m2) {
-        simd4x4_t<float,4> m1 = *this;
-        float32x4_t row, col;
-        for (int i=0; i<4; ++i) {
-            col = vdupq_n_f32(m2.ptr()[i][0]);
-            row = vmulq_f32(m1.m4x4()[0], col);
-            for (int j=1; j<4; ++j) {
-                col = vdupq_n_f32(m2.ptr()[i][j]);
-                row = vaddq_f32(row, vmulq_f32(m1.m4x4()[j], col));
-            }
-            simd4x4[i] = row;
-        }
-        return *this;
-    }
-};
-
-template<int M>
-inline simd4_t<float,M> operator*(const simd4x4_t<float,4>& m, const simd4_t<float,M>& vi)
-{
-    float32x4_t mv = vmulq_f32(m.m4x4()[0], vdupq_n_f32(vi.ptr()[0]));
-    for (int i=1; i<M; ++i) {
-        float32x4_t row = vmulq_f32(m.m4x4()[i], vdupq_n_f32(vi.ptr()[i]));
-        mv = vaddq_f32(mv, row);
-    }
-    return mv;
-}
-
-namespace simd4x4
-{
-
-template<>
-inline simd4x4_t<float,4> rotation_matrix<float>(float angle, const simd4_t<float,3>& axis)
-{
-    float s = std::sin(angle), c = std::cos(angle), t = 1.0-c;
-    simd4_t<float,3> axt, at = axis*t, as = axis*s;
-    simd4x4_t<float,4> m;
-
-    simd4x4::unit(m);
-    axt = axis.ptr()[0]*at;
-    m.m4x4()[0] = axt.v4();
-
-    axt = axis.ptr()[1]*at;
-    m.ptr()[0][0] += c;
-    m.ptr()[0][1] += as.ptr()[2];
-    m.ptr()[0][2] -= as.ptr()[1];
-
-    m.m4x4()[1] = axt.v4();
-
-    axt = axis.ptr()[2]*at;
-    m.ptr()[1][0] -= as.ptr()[2];
-    m.ptr()[1][1] += c;
-    m.ptr()[1][2] += as.ptr()[0];
-
-    m.m4x4()[2] = axt.v4();
-
-    m.ptr()[2][0] += as.ptr()[1];
-    m.ptr()[2][1] -= as.ptr()[0];
-    m.ptr()[2][2] += c;
-
-    return m;
-}
-
-template<>
-inline simd4x4_t<float,4> transpose<float>(simd4x4_t<float,4> m) {
-// http://clb.demon.fi/MathGeoLib/nightly/docs/float4x4_neon.h_code.html
-    float32x4x4_t x = vld4q_f32(m);
-    vst1q_f32(&m[0], x.val[0]);
-    vst1q_f32(&m[4], x.val[1]);
-    vst1q_f32(&m[8], x.val[2]);
-    vst1q_f32(&m[12], x.val[3]);
-    return m;
-}
-
-inline void translate(simd4x4_t<float,4>& m, const simd4_t<float,3>& dist) {
-    m.m4x4()[3] = vsubq_f32(m.m4x4()[3], dist.v4());
-}
-
-template<typename S>
-inline void pre_translate(simd4x4_t<float,4>& m, const simd4_t<S,3>& dist)
-{
-    simd4x4_t<float,4> mt = simd4x4::transpose(m);
-    float32x4_t row3 = mt.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        float32x4_t t = vdupq_n_f32(float(dist[i]));
-        mt.m4x4()[i] = vaddq_f32(mt.m4x4()[i], vmulq_f32(t, row3));
-    }
-    m = simd4x4::transpose(mt);
-}
-
-template<typename S>
-inline void post_translate(simd4x4_t<float,4>& m, const simd4_t<S,3>& dist)
-{
-    float32x4_t col3 = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        float32x4_t t = vdupq_n_f32(float(dist[i]));
-        col3 = vaddq_f32(col3, vmulq_f32(t, m.m4x4()[i]));
-    }
-    m.m4x4()[3] = col3;
-}
-
-template<>
-inline simd4_t<float,3> transform<float>(const simd4x4_t<float,4>& m, const simd4_t<float,3>& pt) {
-    float32x4_t tpt = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        float32x4_t ptd = vdupq_n_f32(pt[i]);
-        tpt = vaddq_f32(tpt, vmulq_f32(ptd, m.m4x4()[i]));
-    }
-    vsetq_lane_f32(0.0f, tpt, 3);
-    return tpt;
-}
-
-} /* namespace simd4x */
-
-
-
-#if 0
-
-template<>
-class simd4x4_t<double,4>
-{
-private:
-    typedef double  __mtx4d_t[4][4];
-
-    union alignas(32) {
-        __m256d simd4x4[4];
-        __mtx4d_t mtx;
-        double array[4*4];
-    };
-
-public:
-    simd4x4_t(void) {}
-    simd4x4_t(double m00, double m01, double m02, double m03,
-              double m10, double m11, double m12, double m13,
-              double m20, double m21, double m22, double m23,
-              double m30, double m31, double m32, double m33)
-    {
-        simd4x4[0] = _mm256_set_pd(m30,m20,m10,m00);
-        simd4x4[1] = _mm256_set_pd(m31,m21,m11,m01);
-        simd4x4[2] = _mm256_set_pd(m32,m22,m12,m02);
-        simd4x4[3] = _mm256_set_pd(m33,m23,m13,m03);
-    }
-    explicit simd4x4_t(const double m[4*4]) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<double,4>((const double*)&m[4*i]).v4();
-        }
-    }
-
-    explicit simd4x4_t(const __mtx4d_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<double,4>(m[i]).v4();
-        }
-    }
-    simd4x4_t(const simd4x4_t<double,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-    }
-    ~simd4x4_t(void) {}
-
-    inline __m256d (&m4x4(void))[4] {
-        return simd4x4;
-    }
-
-    inline const __m256d (&m4x4(void) const)[4] {
-        return simd4x4;
-    }
-
-    inline const double (&ptr(void) const)[4][4] {
-        return mtx;
-    }
-
-    inline double (&ptr(void))[4][4] {
-        return mtx;
-    }
-
-    inline operator const double*(void) const {
-        return array;
-    }
-
-    inline operator double*(void) {
-        return array;
-    }
-
-    template<int M>
-    inline void set(int i, const simd4_t<double,M>& v) {
-        simd4x4[i] = v.v4();
-    }
-
-    inline simd4x4_t<double,4>& operator=(const __mtx4d_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<double,4>(m[i]).v4();
-        }
-        return *this;
-    }
-    inline simd4x4_t<double,4>& operator=(const simd4x4_t<double,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<double,4>& operator+=(const simd4x4_t<double,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = _mm256_add_pd(simd4x4[i], m.m4x4()[i]);
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<double,4>& operator-=(const simd4x4_t<double,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = _mm256_sub_pd(simd4x4[i], m.m4x4()[i]);
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<double,4>& operator*=(double f) {
-        simd4_t<double,4> f4(f);
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] = _mm256_mul_pd(simd4x4[i], f4.v4());
-        }
-        return *this;
-    }
-
-    simd4x4_t<double,4>& operator*=(const simd4x4_t<double,4>& m2) {
-        simd4x4_t<double,4> m1 = *this;
-        __m256d row, col;
-        for (int i=0; i<4; ++i ) {
-            col = _mm256_set1_pd(m2.ptr()[i][0]);
-            row = _mm256_mul_pd(m1.m4x4()[0], col);
-            for (int j=1; j<4; ++j) {
-                col = _mm256_set1_pd(m2.ptr()[i][j]);
-                row = _mm256_add_pd(row, _mm256_mul_pd(m1.m4x4()[j], col));
-            }
-            simd4x4[i] = row;
-        }
-        return *this;
-    }
-
-};
-
-template<int M>
-inline simd4_t<double,M> operator*(const simd4x4_t<double,4>& m, const simd4_t<double,M>& vi)
-{
-    __m256d mv = _mm256_mul_pd(m.m4x4()[0], _mm256_set1_pd(vi.ptr()[0]));
-    for (int i=1; i<M; ++i) {
-        __m256d row = _mm256_mul_pd(m.m4x4()[i], _mm256_set1_pd(vi.ptr()[i]));
-        mv = _mm256_add_pd(mv, row);
-    }
-    return mv;
-}
-
-namespace simd4x4
-{
-
-template<>
-inline simd4x4_t<double,4> rotation_matrix<double>(double angle, const simd4_t<double,3>& axis)
-{
-    double s = std::sin(angle), c = std::cos(angle), t = 1.0-c;
-    simd4_t<double,3> axt, at = axis*t, as = axis*s;
-    simd4x4_t<double,4> m;
-
-    simd4x4::unit(m);
-    axt = axis.ptr()[0]*at;
-    m.m4x4()[0] = axt.v4();
-
-    axt = axis.ptr()[1]*at;
-    m.ptr()[0][0] += c;
-    m.ptr()[0][1] += as.ptr()[2];
-    m.ptr()[0][2] -= as.ptr()[1];
-
-    m.m4x4()[1] = axt.v4();
-
-    axt = axis.ptr()[2]*at;
-    m.ptr()[1][0] -= as.ptr()[2];
-    m.ptr()[1][1] += c;
-    m.ptr()[1][2] += as.ptr()[0];
-
-    m.m4x4()[2] = axt.v4();
-
-    m.ptr()[2][0] += as.ptr()[1];
-    m.ptr()[2][1] -= as.ptr()[0];
-    m.ptr()[2][2] += c;
-
-    return m;
-}
-
-template<>
-inline simd4x4_t<double,4> transpose<double>(simd4x4_t<double,4> m) {
-// http://stackoverflow.com/questions/36167517/m256d-transpose4-equivalent
-    __m256d tmp0 = _mm256_shuffle_pd(m.m4x4()[0], m.m4x4()[1], 0x0);
-    __m256d tmp2 = _mm256_shuffle_pd(m.m4x4()[0], m.m4x4()[1], 0xF);
-    __m256d tmp1 = _mm256_shuffle_pd(m.m4x4()[2], m.m4x4()[3], 0x0);
-    __m256d tmp3 = _mm256_shuffle_pd(m.m4x4()[2], m.m4x4()[3], 0xF);
-
-    m.m4x4()[0] = _mm256_permute2f128_pd(tmp0, tmp1, 0x20);
-    m.m4x4()[1] = _mm256_permute2f128_pd(tmp2, tmp3, 0x20);
-    m.m4x4()[2] = _mm256_permute2f128_pd(tmp0, tmp1, 0x31);
-    m.m4x4()[3] = _mm256_permute2f128_pd(tmp2, tmp3, 0x31);
-
-    return m;
-}
-
-inline void translate(simd4x4_t<double,4>& m, const simd4_t<double,3>& dist) {
-    m.m4x4()[3] = _mm256_sub_pd(m.m4x4()[3], dist.v4());
-}
-
-template<typename S>
-inline void pre_translate(simd4x4_t<double,4>& m, const simd4_t<S,3>& dist)
-{
-    simd4_t<double,4> row3(m.ptr()[0][3],m.ptr()[1][3],m.ptr()[2][3],m.ptr()[3][3]);
-    for (int i=0; i<3; ++i) {
-        for (int j=0; j<4; ++j) {
-            m.ptr()[j][i] += row3[j]*double(dist[i]);
-        }
-    }
-#if 0
-    // this is slower
-    simd4x4_t<double,4> mt = simd4x4::transpose(m);
-    __mm256d row3 = mt.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        __mm256d _mm256_set1_pd(float(dist[i]));
-        mt.m4x4()[i] = _mm256_add_pd(mt.m4x4()[i], _mm256_mul_pd(t, row3));
-    }
-    m = simd4x4::transpose(mt);
-#endif
-}
-
-template<typename S>
-inline void post_translate(simd4x4_t<double,4>& m, const simd4_t<S,3>& dist) {
-    __m256d col3 = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        __m256d t = _mm256_set1_pd(double(dist[i]));
-        col3 = _mm256_add_pd(col3, _mm256_mul_pd(t, m.m4x4()[i]));
-    }
-    m.m4x4()[3] = col3;
-}
-
-template<>
-inline simd4_t<double,3> transform<double>(const simd4x4_t<double,4>& m, const simd4_t<double,3>& pt) {
-    simd4_t<double,3> res;
-    __m256d tpt = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        __m256d ptd = _mm256_set1_pd(pt[i]);
-        tpt = _mm256_add_pd(tpt, _mm256_mul_pd(ptd, m.m4x4()[i]));
-    }
-    res = tpt;
-    res[3] = 0.0;
-    return res;
-}
-
-} /* namespace simd4x4 */
-# endif
-
-
-template<>
-class simd4x4_t<int,4>
-{
-private:
-    typedef int  __mtx4i_t[4][4];
-
-    union alignas(16) {
-        int32x4_t simd4x4[4];
-        __mtx4i_t mtx;
-        int array[4*4];
-    }g;
-
-public:
-    simd4x4_t(void) {}
-    simd4x4_t(int m00, int m01, int m02, int m03,
-              int m10, int m11, int m12, int m13,
-              int m20, int m21, int m22, int m23,
-              int m30, int m31, int m32, int m33)
-    {
-        array[0] = m00; array[1] = m10;
-        array[2] = m20; array[3] = m30;
-        array[4] = m01; array[5] = m11;
-        array[6] = m21; array[7] = m31;
-        array[8] = m02; array[9] = m12;
-        array[10] = m22; array[11] = m32;
-        array[12] = m03; array[13] = m13;
-        array[14] = m23; array[15] = m33;
-    }
-    simd4x4_t(const int m[4*4]) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<int,4>((const int*)&m[4*i]).v4();
-        }
-    }
-    explicit simd4x4_t(const __mtx4i_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<int,4>(m[i]).v4();
-        }
-    }
-    simd4x4_t(const simd4x4_t<int,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-    }
-    ~simd4x4_t(void) {}
-
-    inline int32x4_t (&m4x4(void))[4] {
-        return simd4x4;
-    }
-
-    inline const int32x4_t (&m4x4(void) const)[4] {
-        return simd4x4;
-    }
-    
-    inline const int (&ptr(void) const)[4][4] {
-        return mtx;
-    }
-
-    inline int (&ptr(void))[4][4] {
-        return mtx;
-    }
-
-    inline operator const int*(void) const {
-        return array;
-    }
-
-    inline operator int*(void) {
-        return array;
-    }
-
-    template<int M>
-    inline void set(int i, const simd4_t<int,M>& v) {
-        simd4x4[i] = v.v4();
-    }
-
-    inline simd4x4_t<int,4>& operator=(const __mtx4i_t m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = simd4_t<int,4>(m[i]).v4();
-        }
-        return *this;
-    }
-    inline simd4x4_t<int,4>& operator=(const simd4x4_t<int,4>& m) {
-        for (int i=0; i<4; ++i) {
-            simd4x4[i] = m.m4x4()[i];
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<int,4>& operator+=(const simd4x4_t<int,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] += m.m4x4()[i];
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<int,4>& operator-=(const simd4x4_t<int,4>& m) {
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] -= m.m4x4()[i];
-        }
-        return *this;
-    }
-
-    inline simd4x4_t<int,4>& operator*=(int f) {
-        simd4_t<int,4> f4(f);
-        for (int i=0; i<4; ++i) {
-           simd4x4[i] *= f4.v4();
-        }
-        return *this;
-    }
-
-    simd4x4_t<int,4>& operator*=(const simd4x4_t<int,4>& m2) {
-        simd4x4_t<int,4> m1 = *this;
-        simd4_t<int,4> row, col;
-
-        for (int i=0; i<4; ++i) {
-            simd4_t<int,4> col(m2.ptr()[i][0]);
-            row.v4() = m1.m4x4()[0] * col.v4();
-            for (int j=1; j<4; ++j) {
-                simd4_t<int,4> col(m2.ptr()[i][j]);
-                row.v4() += m1.m4x4()[j] * col.v4();
-            }
-            simd4x4[i] = row.v4();
-        }
-        return *this;
-    }
-};
-
-template<int M>
-inline simd4_t<int,M> operator*(const simd4x4_t<int,4>& m, const simd4_t<int,M>& vi)
-{
-    simd4_t<int,M> mv(m.m4x4()[0]);
-    mv *= vi.ptr()[0];
-    for (int i=1; i<M; ++i) {
-        simd4_t<int,4> row(m.m4x4()[i]);
-        row *= vi.ptr()[i];
-        mv.v4() += row.v4();
-    }
-    for (int i=M; i<4; ++i) mv[i] = 0;
-    return mv;
-}
-
-template<>
-inline simd4x4_t<int,4> operator*(const simd4x4_t<int,4>& m1, const simd4x4_t<int,4>& m2)
-{
-    simd4_t<int,4> row, col;
-    simd4x4_t<int,4> m;
-
-    for (int i=0; i<4; ++i) {
-        simd4_t<int,4> col(m2.ptr()[i][0]);
-        row.v4() = m1.m4x4()[0] * col.v4();
-        for (int j=1; j<4; ++j) {
-            simd4_t<int,4> col(m2.ptr()[i][j]);
-            row.v4() += m1.m4x4()[j] * col.v4();
-        }
-        m.m4x4()[i] = row.v4();
-    }
-
-    return m;
-}
-
-namespace simd4x4
-{
-
-template<>
-inline simd4x4_t<int,4> transpose<int>(simd4x4_t<int,4> m) {
-    int32x4x4_t x = vld4q_s32(m);
-    vst1q_s32(&m[0], x.val[0]);
-    vst1q_s32(&m[4], x.val[1]);
-    vst1q_s32(&m[8], x.val[2]);
-    vst1q_s32(&m[12], x.val[3]);
-    return m;
-}
-
-inline void translate(simd4x4_t<int,4>& m, const simd4_t<int,3>& dist) {
-    m.m4x4()[3] = vsubq_s32(m.m4x4()[3], dist.v4());
-}
-
-template<typename S>
-inline void pre_translate(simd4x4_t<int,4>& m, const simd4_t<S,3>& dist)
-{
-    simd4x4_t<int,4> mt = simd4x4::transpose(m);
-    simd4_t<int,4> row3(mt.ptr()[3]);
-    for (int i=0; i<3; ++i) {
-        simd4_t<int,4> trow3 = int(dist[i]);
-        trow3 *= row3.v4();
-        mt.m4x4()[i] = vaddq_s32(mt.m4x4()[i], trow3.v4());
-    }
-    m = simd4x4::transpose(mt);
-}
-
-template<typename S>
-inline void post_translate(simd4x4_t<int,4>& m, const simd4_t<S,3>& dist)
-{
-    int32x4_t col3 = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        simd4_t<int,4> trow3 = int(dist[i]);
-        trow3 *= m.m4x4()[i];
-        col3 = vaddq_s32(col3, trow3.v4());
-    }
-    m.m4x4()[3] = col3;
-}
-
-template<>
-inline simd4_t<int,3> transform<int>(const simd4x4_t<int,4>& m, const simd4_t<int,3>& pt) {
-    simd4_t<int,3> tpt = m.m4x4()[3];
-    for (int i=0; i<3; ++i) {
-        simd4_t<int,3> ptd = m.m4x4()[i];
-        ptd *= pt[i];
-        tpt.v4() = vaddq_s32(tpt.v4(), ptd.v4());
-    }
-    tpt[3] = 0.0;
-    return tpt;
-}
-
-
-} /* namespace simd4x */
-#endif
-
-#endif /* __SIMD4X4_NEON_H__ */
-
diff -Naur simgear-2017.2.1/simgear/math/simd_neon.hxx simgear-2017.2.1.noneon/simgear/math/simd_neon.hxx
--- simgear-2017.2.1/simgear/math/simd_neon.hxx	2017-05-21 06:57:58.000000000 +0000
+++ simgear-2017.2.1.noneon/simgear/math/simd_neon.hxx	1970-01-01 00:00:00.000000000 +0000
@@ -1,545 +0,0 @@
-// Copyright (C) 2016 Erik Hofman - erik@ehofman.com
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Library General Public
-// License as published by the Free Software Foundation; either
-// version 2 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Library General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-//
-
-#ifndef __SIMD_NEON_H__
-#define __SIMD_NEON_H__	1
-
-#ifdef __ARM_NEON__
-
-static const uint32_t m2a32[] alignas(16) = { 0xffffffff,0xffffffff,0,0 };
-static const uint32_t m3a32[] alignas(16) = { 0xffffffff,0xffffffff,0xffffffff,0 };
-
-template<int N>
-class simd4_t<float,N>
-{
-private:
-   typedef float  __vec4f_t[N];
-
-    union alignas(16) {
-        float32x4_t simd4;
-        float32x2x2_t simd2x2;
-        __vec4f_t vec;
-    };
-
-public:
-    simd4_t(void) {}
-    simd4_t(float f) {}
-    simd4_t(float x, float y) : simd4_t(x,y,0,0) {}
-    simd4_t(float x, float y, float z) : simd4_t(x,y,z,0) {}
-    simd4_t(float x, float y, float z, float w) {
-        alignas(16) float data[4] = { x, y, z, w };
-        simd4 = vld1q_f32(data);
-    }
-    simd4_t(const __vec4f_t v) {}
-    template<int M>
-    simd4_t(const simd4_t<float,M>& v) {
-        simd4 = v.v4();
-    }
-    simd4_t(const float32x4_t& v) {
-        simd4 = v;
-    }
-
-    inline const float32x2x2_t (&v2x2(void) const) {
-        return simd2x2;
-    }
-    inline float32x2x2_t (&v2x2(void)) {
-        return simd2x2;
-    }
-
-    inline const float32x4_t (&v4(void) const) {
-        return simd4;
-    }
-    inline float32x4_t (&v4(void)) {
-        return simd4;
-    }
-
-    inline const float (&ptr(void) const)[N] {
-        return vec;
-    }
-    inline float (&ptr(void))[N] {
-        return vec;
-    }
-
-    inline operator const float*(void) const {
-        return vec;
-    }
-    inline operator float*(void) {
-        return vec;
-    }
-
-    inline simd4_t<float,N>& operator+=(float f) {
-        return operator+=(simd4_t<float,N>(f));
-    }
-    template<int M>
-    inline simd4_t<float,N>& operator+=(const simd4_t<float,M>& v) {
-        simd4 = vaddq_f32(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<float,N>& operator-=(float f) {
-        return operator-=(simd4_t<float,N>(f));
-    }
-    template<int M>
-    inline simd4_t<float,N>& operator-=(const simd4_t<float,M>& v) {
-        simd4 = vsubq_f32(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<float,N>& operator*=(float f) {
-        return operator*=(simd4_t<float,N>(f));
-    }
-    template<int M>
-    inline simd4_t<float,N>& operator*=(const simd4_t<float,M>& v) {
-        simd4 = vmulq_f32(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<float,N>& operator/=(float f) {
-        return operator/=(simd4_t<float,4>(f));
-    }
-    template<int M>
-    inline simd4_t<float,N>& operator/=(const simd4_t<float,M>& v) {
-// http://stackoverflow.com/questions/6759897/how-to-divide-in-neon-intrinsics-by-a-float-number
-        float32x4_t recip = vrecpeq_f32(v.v4());
-        recip = vmulq_f32(vrecpsq_f32(v.v4(), recip), recip);
-        recip = vmulq_f32(vrecpsq_f32(v.v4(), recip), recip);
-        recip = vmulq_f32(vrecpsq_f32(v.v4(), recip), recip);
-        simd4 = vmulq_f32(simd4, recip);
-        return *this;
-    }
-};
- 
-# define vandq_f32(a,b) vreinterpretq_f32_u32(vandq_u32(vreinterpretq_u32_f32(a), vreinterpretq_u32_f32(b)))
-
-static const float32x4_t fmask2 = vld1q_f32((const float*)m2a32);
-static const float32x4_t fmask3 = vld1q_f32((const float*)m3a32);
-
-template<>
-inline simd4_t<float,4>::simd4_t(const __vec4f_t v) {
-    simd4 = vld1q_f32(v);
-}
-template<>
-inline simd4_t<float,3>::simd4_t(const __vec4f_t v) {
-    simd4 = vandq_f32(vld1q_f32(v), fmask3);
-}
-template<>
-inline simd4_t<float,2>::simd4_t(const __vec4f_t v) {
-    simd4 = vandq_f32(vld1q_f32(v), fmask2);
-}
-template<>
-inline simd4_t<float,4>::simd4_t(float f) {
-    simd4 = vdupq_n_f32(f);
-}
-template<>
-inline simd4_t<float,3>::simd4_t(float f) {
-    simd4 = vandq_f32(vdupq_n_f32(f), fmask3);
-}
-
-template<>
-inline simd4_t<float,2>::simd4_t(float f) {
-    simd4 = vandq_f32(vdupq_n_f32(f), fmask2);
-}
-
-
-namespace simd4
-{
-// http://stackoverflow.com/questions/6931217/sum-all-elements-in-a-quadword-vector-in-arm-assembly-with-neon
-inline static float hsum_float32x4_neon(float32x4_t v) {
-    float32x2_t r = vadd_f32(vget_high_f32(v), vget_low_f32(v));
-    return vget_lane_f32(vpadd_f32(r, r), 0);
-}
-
-template<>
-inline float magnitude2(simd4_t<float,4> v) {
-    return hsum_float32x4_neon(v.v4()*v.v4());
-}
-
-template<>
-inline float dot(simd4_t<float,4> v1, const simd4_t<float,4>& v2) {
-    return hsum_float32x4_neon(v1.v4()*v2.v4());
-}
-
-template<>
-inline simd4_t<float,3> cross(const simd4_t<float,3>& v1, const simd4_t<float,3>& v2)
-{
-    // from 0123 to 0213
-    float32x2x2_t v1lh_2013 = vzip_f32(v1.v2x2().val[0], v1.v2x2().val[1]);
-    float32x2x2_t v2lh_2013 = vzip_f32(v2.v2x2().val[0], v2.v2x2().val[1]);
-
-    // from 0213 to 2013
-    v1lh_2013.val[0] = vrev64_f32(v1lh_2013.val[0]);
-    v2lh_2013.val[0] = vrev64_f32(v2lh_2013.val[0]);
-
-    float32x4_t v1_2013 = vcombine_f32(v1lh_2013.val[0], v1lh_2013.val[1]);
-    float32x4_t v2_2013 = vcombine_f32(v2lh_2013.val[0], v2lh_2013.val[1]);
-
-    // from 2013 to 2103
-    float32x2x2_t v1lh_1203 = vzip_f32(v1lh_2013.val[0], v1lh_2013.val[1]);
-    float32x2x2_t v2lh_1203 = vzip_f32(v2lh_2013.val[0], v2lh_2013.val[1]);
-
-    // from 2103 to 1203
-    v1lh_1203.val[0] = vrev64_f32(v1lh_1203.val[0]);
-    v2lh_1203.val[0] = vrev64_f32(v2lh_1203.val[0]);
-
-    float32x4_t v1_1203 = vcombine_f32(v1lh_1203.val[0], v1lh_1203.val[1]);
-    float32x4_t v2_1203 = vcombine_f32(v2lh_1203.val[0], v2lh_1203.val[1]);
-
-    // calculate the cross product
-    return vsubq_f32(vmulq_f32(v1_1203,v2_2013),vmulq_f32(v1_2013,v2_1203));
-}
-
-
-template<int N>
-inline simd4_t<float,N> min(simd4_t<float,N> v1, const simd4_t<float,N>& v2) {
-    v1 = vminq_f32(v1.v4(), v2.v4());
-    return v1;
-}
-
-template<int N>
-inline simd4_t<float,N> max(simd4_t<float,N> v1, const simd4_t<float,N>& v2) {
-    v1 = vmaxq_f32(v1.v4(), v2.v4());
-    return v1;
-}
-
-template<int N>
-inline simd4_t<float,N>abs(simd4_t<float,N> v) {
-    return vabsq_f32(v.v4());
-}
-
-} /* namsepace simd4 */
-
-
-// TODO: 64-bit support for doubles
-#if 0
-template<int N>
-class simd4_t<double,N>
-{
-private:
-   typedef double  __vec4d_t[N];
-
-    union alignas(32) {
-        __m256d simd4;
-        __vec4d_t vec;
-    };
-
-public:
-    simd4_t(void) {}
-    simd4_t(double d) {}
-    simd4_t(double x, double y) : simd4_t(x,y,0,0) {}
-    simd4_t(double x, double y, double z) : simd4_t(x,y,z,0) {}
-    simd4_t(double x, double y, double z, double w) {
-        simd4 = _mm256_set_pd(w,z,y,x);
-    }
-    simd4_t(const __vec4d_t v) { {}
-    template<int M>
-    simd4_t(const simd4_t<double,M>& v) {
-        simd4 = v.v4();
-    }
-    simd4_t(const __m256d& v) {
-        simd4 = v;
-    }
-
-    inline const __m256d (&v4(void) const) {
-        return simd4;
-    }
-    inline __m256d (&v4(void)) {
-        return simd4;
-    }
-
-    inline const double (&ptr(void) const)[N] {
-        return vec;
-    }
-    inline double (&ptr(void))[N] {
-        return vec;
-    }
-
-    inline operator const double*(void) const {
-        return vec;
-    }
-    inline operator double*(void) {
-        return vec;
-    }
-
-    inline simd4_t<double,N>& operator+=(double d) {
-        return operator+=(simd4_t<double,N>(d));
-    }
-    template<int M>
-    inline simd4_t<double,N>& operator+=(const simd4_t<double,M>& v) {
-        simd4 = _mm256_add_pd(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<double,N>& operator-=(double d) {
-        return operator-=(simd4_t<double,N>(d));
-    }
-    template<int M>
-    inline simd4_t<double,N>& operator-=(const simd4_t<double,M>& v) {
-        simd4 = _mm256_sub_pd(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<double,N>& operator*=(double d) {
-        return operator*=(simd4_t<double,N>(d));
-    }
-    template<int M>
-    inline simd4_t<double,N>& operator*=(const simd4_t<double,M>& v) {
-        simd4 = _mm256_mul_pd(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<double,N>& operator/=(double d) {
-        return operator/=(simd4_t<double,4>(d));
-    }
-    template<int M>
-    inline simd4_t<double,N>& operator/=(const simd4_t<double,M>& v) {
-        simd4 = _mm256_div_pd(simd4, v.v4());
-        return *this;
-    }
-};
-
-static const __m256d dmask2 = _mm256_load_pd((const double*)m2a64);
-static const __m256d dmask3 = _mm256_load_pd((const double*)m3a64);
-
-template<>
-inline simd4_t<double,4>::simd4_t(const __vec4d_t v) {
-    simd4 = _mm256_loadu_pd(v);
-}
-template<>
-inline simd4_t<double,3>::simd4_t(const __vec4d_t v) {
-    simd4 = _mm256_and_pd(_mm256_loadu_pd(v), dmask3);
-}
-template<>
-inline simd4_t<double,2>::simd4_t(const __vec4d_t v) {
-    simd4 = _mm256_and_pd(_mm256_loadu_pd(v), dmask2);
-}
-template<>
-inline simd4_t<double,4>::simd4_t(double d) {
-    simd4 = _mm256_set1_pd(d);
-}
-template<>
-inline simd4_t<double,3>::simd4_t(double d) {
-    simd4 = _mm256_and_pd(_mm256_set1_pd(d), dmask3);
-}
-template<>
-inline simd4_t<double,2>::simd4_t(double d) {
-    simd4 = _mm256_and_pd(_mm256_set1_pd(d), dmask2);
-}
-
-namespace simd4
-{
-// http://berenger.eu/blog/sseavxsimd-horizontal-sum-sum-simd-vector-intrinsic/
-inline static float hsum_pd_avx(__m256d v) {
-    const float64x4_t valupper = _mm256_extractf128_pd(v, 1);
-    const float64x4_t vallower = _mm256_castpd256_pd128(v);
-    _mm256_zeroupper();
-    const float64x4_t valval = _mm_add_pd(valupper, vallower);
-    const float64x4_t sums =   _mm_add_pd(_mm_permute_pd(valval,1), valval);
-    return                 _mm_cvtsd_f64(sums);
-}
-
-template<>
-inline double magnitude2(simd4_t<double,4> v) {
-    return hsum_pd_avx(_mm256_mul_pd(v.v4(),v.v4()));
-}
-
-template<>
-inline double dot(simd4_t<double,4> v1, const simd4_t<double,4>& v2) {
-    return hsum_pd_avx(_mm256_mul_pd(v1.v4(),v2.v4()));
-}
-
-template<>
-inline simd4_t<double,3> cross(const simd4_t<double,3>& v1, const simd4_t<double,3>& v2)
-{
-    // https://gist.github.com/L2Program/219e07581e69110e7942
-    __m256d v41 = v1.v4(), v42 = v2.v4();
-    return _mm256_sub_pd(
-               _mm256_mul_pd(
-                     _mm256_permute4x64_pd(v41,_MM_SHUFFLE(3, 0, 2, 1)),
-                     _mm256_permute4x64_pd(v42,_MM_SHUFFLE(3, 1, 0, 2))),
-               _mm256_mul_pd(
-                     _mm256_permute4x64_pd(v41,_MM_SHUFFLE(3, 1, 0, 2)),
-                     _mm256_permute4x64_pd(v42,_MM_SHUFFLE(3, 0, 2, 1))));
-}
-
-template<int N>
-inline simd4_t<double,N> min(simd4_t<double,N> v1, const simd4_t<double,N>& v2) {
-    v1 = _mm256_min_pd(v1.v4(), v2.v4());
-    return v1;
-}
-
-template<int N>
-inline simd4_t<double,N> max(simd4_t<double,N> v1, const simd4_t<double,N>& v2) {
-    v1 = _mm256_max_pd(v1.v4(), v2.v4());
-    return v1;
-}
-
-template<int N>
-inline simd4_t<double,N>abs(simd4_t<double,N> v) {
-    static const __m256d sign_mask = _mm256_set1_pd(-0.); // -0. = 1 << 63
-    v = _mm256_andnot_pd(sign_mask, v.v4());
-    return v;
-}
-
-} /* namespace simd4 */
-#endif
-
-
-template<int N>
-class simd4_t<int,N>
-{
-private:
-   typedef int  __vec4i_t[N];
-
-    union alignas(16) {
-        int32x4_t simd4;
-        __vec4i_t vec;
-    };
-
-public:
-    simd4_t(void) {}
-    simd4_t(int i) {}
-    simd4_t(int x, int y) : simd4_t(x,y,0,0) {}
-    simd4_t(int x, int y, int z) : simd4_t(x,y,z,0) {}
-    simd4_t(int x, int y, int z, int w) {
-        alignas(16) int32_t data[4] = { x, y, z, w };
-        simd4 = vld1q_s32(data);
-    }
-    simd4_t(const __vec4i_t v) {}
-    template<int M>
-    simd4_t(const simd4_t<int,M>& v) {
-        simd4 = v.v4();
-    }
-    simd4_t(const int32x4_t& v) {
-        simd4 = v;
-    }
-
-    inline int32x4_t (&v4(void)) {
-        return simd4;
-    }
-
-    inline const int32x4_t (&v4(void) const) {
-        return simd4;
-    }
-
-    inline const int (&ptr(void) const)[N] {
-        return vec;
-    }
-
-    inline int (&ptr(void))[N] {
-        return vec;
-    }
-
-    inline operator const int*(void) const {
-        return vec;
-    }
-
-    inline operator int*(void) {
-        return vec;
-    }
-
-    inline simd4_t<int,N>& operator+=(int i) {
-        return operator+=(simd4_t<int,N>(i));
-    }
-    template<int M>
-    inline simd4_t<int,N>& operator+=(const simd4_t<int,M>& v) {
-        simd4 = vaddq_s32(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<int,N>& operator-=(int i) {
-        return operator-=(simd4_t<int,N>(i));
-    }
-    template<int M>
-    inline simd4_t<int,N>& operator-=(const simd4_t<int,M>& v) {
-        simd4 = vsubq_s32(simd4, v.v4());
-        return *this;
-    }
-
-    inline simd4_t<int,N>& operator*=(int i) {
-        return operator*=(simd4_t<int,N>(i));
-    }
-    template<int M>
-    inline simd4_t<int,N>& operator*=(const simd4_t<int,M>& v) {
-         return operator*=(v.v4());
-    }
-    inline simd4_t<int,N>& operator*=(const int32x4_t& v) {
-        simd4 = vmulq_s32(simd4, v);
-        return *this;
-    }
-
-    inline simd4_t<int,N>& operator/=(int s) {
-        return operator/=(simd4_t<int,4>(s));
-    }
-    template<int M>
-    inline simd4_t<int,N>& operator/=(const simd4_t<int,M>& v) {
-        for (int i=0; i<N; ++i) {
-           vec[i] /= v[i];
-        }
-        return *this;
-    }
-};
-
-static const int32x4_t imask2 = vld1q_s32((int32_t*)m2a32);
-static const int32x4_t imask3 = vld1q_s32((int32_t*)m3a32);
-
-template<>
-inline simd4_t<int,4>::simd4_t(const __vec4i_t v) {
-    simd4 = vld1q_s32(v);
-}
-template<>
-inline simd4_t<int,3>::simd4_t(const __vec4i_t v) {
-    simd4 = vandq_s32(vld1q_s32(v), imask3);
-}
-template<>
-inline simd4_t<int,2>::simd4_t(const __vec4i_t v) {
-    simd4 = vandq_s32(vld1q_s32(v), imask2);
-}
-template<>
-inline simd4_t<int,4>::simd4_t(int i) {
-    simd4 = vdupq_n_s32(i);
-}
-template<>
-inline simd4_t<int,3>::simd4_t(int i) {
-    simd4 = vandq_s32(vdupq_n_s32(i), imask3);
-}
-template<>
-inline simd4_t<int,2>::simd4_t(int i) {
-    simd4 = vandq_s32(vdupq_n_s32(i), imask2);
-}
-
-
-namespace simd4
-{
-
-template<int N>
-inline simd4_t<int,N> min(simd4_t<int,N> v1, const simd4_t<int,N>& v2) {
-    v1 = vminq_s32(v1.v4(), v2.v4());
-    return v1;
-}
-
-template<int N>
-inline simd4_t<int,N> max(simd4_t<int,N> v1, const simd4_t<int,N>& v2) {
-    v1 = vmaxq_s32(v1.v4(), v2.v4());
-    return v1;
-}
-
-} /* namespace simd4 */
-
-# endif
-
-#endif /* __SIMD_NEON_H__ */
-
