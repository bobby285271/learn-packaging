--- libzeitgeist-0.3.18/src/zeitgeist-log.c	2012-04-05 03:05:20.000000000 -0700
+++ libzeitgeist/src/zeitgeist-log.c	2012-05-03 14:47:43.868522000 -0700
@@ -57,6 +57,10 @@ typedef struct
    * If log != NULL it means we have a connection */
   GDBusProxy *log;
 
+  /* In case auto-launching the ZG daemon failed, this
+   * variable will hold the error. */
+  GError *log_error;
+
   /* Hash set of ZeitgeistMonitors we've installed.
    * We store a map of (monitor, registration_id)  */
   GHashTable *monitors;
@@ -124,6 +128,7 @@ zeitgeist_log_init (ZeitgeistLog *self)
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
   priv->log = NULL;
+  priv->log_error = NULL;
 
   /* Reset hash set of monitors */
   priv->monitors = g_hash_table_new (g_direct_hash, g_direct_equal);
@@ -173,6 +178,11 @@ zeitgeist_log_finalize (GObject *object)
     {
       g_variant_unref (priv->engine_version);
     }
+
+  if (priv->log_error)
+    {
+      g_error_free (priv->log_error);
+    }
   
   G_OBJECT_CLASS (zeitgeist_log_parent_class)->finalize (object); 
 }
@@ -251,6 +261,7 @@ static void
 dispatch_method (MethodDispatchContext *ctx)
 {
   ZeitgeistLogPrivate *priv;
+  GSimpleAsyncResult *async_result;
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (ctx->self);
 
@@ -265,9 +276,32 @@ dispatch_method (MethodDispatchContext *
                          dispatch_async_callback,
                          ctx);
     }
+  else if (priv->log_error)
+    {
+      // Zeitgeist couldn't be auto-started. We'll run the callback
+      // anyway and give it an error.
+      if (ctx->cb != NULL)
+        {
+          async_result = g_simple_async_result_new (G_OBJECT (ctx->self),
+                                                    ctx->cb,
+                                                    ctx->user_data,
+                                                    NULL);
+          g_simple_async_result_set_check_cancellable (async_result,
+                                                       ctx->cancellable);
+          g_simple_async_result_set_from_error (async_result, priv->log_error);
+          g_simple_async_result_complete_in_idle (async_result);
+          g_object_unref (async_result);
+        }
+
+      g_object_unref (ctx->self);
+      g_free (ctx);
+    }
   else
-    priv->method_dispatch_queue = g_slist_prepend (priv->method_dispatch_queue,
-                                                   ctx);
+    {
+      // Queue the request while we wait for Zeitgeist to show up
+      priv->method_dispatch_queue = g_slist_prepend (priv->method_dispatch_queue,
+                                                     ctx);
+    }
 }
 
 /* Used to marshal the async callbacks from GDBus into ones
@@ -496,6 +530,10 @@ zeitgeist_log_insert_events_finish (Zeit
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return NULL;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -593,6 +631,10 @@ zeitgeist_log_find_events_finish (Zeitge
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return NULL;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -673,6 +715,10 @@ zeitgeist_log_find_event_ids_finish (Zei
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return NULL;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -741,6 +787,10 @@ zeitgeist_log_get_events_finish (Zeitgei
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return NULL;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -851,6 +901,10 @@ zeitgeist_log_delete_events_finish (Zeit
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return FALSE;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -928,6 +982,10 @@ zeitgeist_log_find_related_uris_finish (
   g_return_val_if_fail (error == NULL || *error == NULL, NULL);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return NULL;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -982,6 +1040,10 @@ zeitgeist_log_delete_log_finish (Zeitgei
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return FALSE;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -1028,6 +1090,10 @@ zeitgeist_log_quit_finish (ZeitgeistLog
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   priv = ZEITGEIST_LOG_GET_PRIVATE (self);
+
+  if (priv->log_error && g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (res), error))
+      return FALSE;
+
   val = g_dbus_proxy_call_finish (priv->log, res, error);
 
   if (val == NULL)
@@ -1061,6 +1127,7 @@ _zeitgeist_log_on_zg_proxy_acquired (GOb
                   "but we already have one. Discarding the old and using the "
                   "new one");
       g_object_unref (priv->log);
+      g_clear_error (&priv->log_error);
       priv->log = NULL;
     }
 
@@ -1069,9 +1136,10 @@ _zeitgeist_log_on_zg_proxy_acquired (GOb
 
   if (error != NULL)
     {
+      priv->log_error = g_error_copy (error);
       g_critical ("Failed to create proxy for Zeitgeist daemon: %s",
                   error->message);
-      goto cleanup;
+      goto process_pending_calls;
     }
 
   priv->connection = G_DBUS_CONNECTION (g_object_ref (
@@ -1097,12 +1165,14 @@ _zeitgeist_log_on_zg_proxy_acquired (GOb
   priv->is_connected = TRUE;
   g_object_notify (G_OBJECT (self), "connected");
 
-  /* Dispatch all queued method calls we got while we didn't have a proxy.
-   * Note that dispatch_method() also frees all the queue members */
-  priv->method_dispatch_queue = g_slist_reverse (priv->method_dispatch_queue);
-  g_slist_foreach (priv->method_dispatch_queue, (GFunc) dispatch_method, NULL);
-  g_slist_free (priv->method_dispatch_queue);
-  priv->method_dispatch_queue = NULL;
+  process_pending_calls:
+
+    /* Dispatch all queued method calls we got while we didn't have a proxy.
+     * Note that dispatch_method() also frees all the queue members */
+    priv->method_dispatch_queue = g_slist_reverse (priv->method_dispatch_queue);
+    g_slist_foreach (priv->method_dispatch_queue, (GFunc) dispatch_method, NULL);
+    g_slist_free (priv->method_dispatch_queue);
+    priv->method_dispatch_queue = NULL;
 
   cleanup:
     g_object_unref (self);
