diff -up dbus-sharp-0.8.1/src/Address.cs.cleanups dbus-sharp-0.8.1/src/Address.cs
--- dbus-sharp-0.8.1/src/Address.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/Address.cs	2017-07-11 11:05:06.472549609 -0400
@@ -23,7 +23,7 @@ namespace DBus
 		public BadAddressException (string reason) : base (reason) {}
 	}
 
-	static class Address
+	public static class Address
 	{
 		// (unix:(path|abstract)=.*,guid=.*|tcp:host=.*(,port=.*)?);? ...
 		// or
diff -up dbus-sharp-0.8.1/src/AddressEntry.cs.cleanups dbus-sharp-0.8.1/src/AddressEntry.cs
--- dbus-sharp-0.8.1/src/AddressEntry.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/AddressEntry.cs	2017-07-11 11:05:06.472549609 -0400
@@ -9,7 +9,7 @@ using System.Collections.Generic;
 
 namespace DBus
 {
-	class AddressEntry
+	public class AddressEntry
 	{
 		public string Method;
 		public readonly IDictionary<string,string> Properties = new Dictionary<string,string> ();
diff -up dbus-sharp-0.8.1/src/Authentication.cs.cleanups dbus-sharp-0.8.1/src/Authentication.cs
--- dbus-sharp-0.8.1/src/Authentication.cs.cleanups	2013-07-26 12:37:41.000000000 -0400
+++ dbus-sharp-0.8.1/src/Authentication.cs	2017-07-11 11:05:06.472549609 -0400
@@ -15,7 +15,7 @@ namespace DBus
 
 	//using System.Runtime.InteropServices;
 	//[StructLayout (LayoutKind.Sequential)]
-	unsafe struct UUID
+	public unsafe struct UUID
 	{
 		private int a, b, c, d;
 		const int ByteLength = 16;
@@ -172,7 +172,7 @@ namespace DBus.Authentication
 		WaitingForBegin,
 	}
 
-	class AuthCommand
+	public class AuthCommand
 	{
 		/*
 		public AuthCommand (string value)
@@ -214,7 +214,7 @@ namespace DBus.Authentication
 		public readonly string Value;
 	}
 
-	class SaslPeer : IEnumerable<AuthCommand>
+	public class SaslPeer : IEnumerable<AuthCommand>
 	{
 		//public Connection conn;
 		public SaslPeer Peer;
@@ -396,7 +396,7 @@ namespace DBus.Authentication
 		public UUID ActualId = UUID.Zero;
 	}
 
-	class SaslServer : SaslPeer
+	public class SaslServer : SaslPeer
 	{
 		//public int MaxFailures = 10;
 		public UUID Guid = UUID.Zero;
diff -up dbus-sharp-0.8.1/src/Bus.cs.cleanups dbus-sharp-0.8.1/src/Bus.cs
--- dbus-sharp-0.8.1/src/Bus.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/Bus.cs	2017-07-11 11:05:06.472549609 -0400
@@ -136,12 +136,12 @@ namespace DBus
 			return bus.StartServiceByName (name, flags);
 		}
 
-		internal protected override void AddMatch (string rule)
+		public override void AddMatch (string rule)
 		{
 			bus.AddMatch (rule);
 		}
 
-		internal protected override void RemoveMatch (string rule)
+		public override void RemoveMatch (string rule)
 		{
 			bus.RemoveMatch (rule);
 		}
diff -up dbus-sharp-0.8.1/src/BusException.cs.cleanups dbus-sharp-0.8.1/src/BusException.cs
--- dbus-sharp-0.8.1/src/BusException.cs.cleanups	2013-07-26 12:37:41.000000000 -0400
+++ dbus-sharp-0.8.1/src/BusException.cs	2017-07-11 11:05:06.472549609 -0400
@@ -7,7 +7,7 @@ using System;
 
 namespace DBus
 {
-	class BusException : Exception
+	public class BusException : Exception
 	{
 		public BusException (string errorName, string errorMessage)
 		{
diff -up dbus-sharp-0.8.1/src/Connection.cs.cleanups dbus-sharp-0.8.1/src/Connection.cs
--- dbus-sharp-0.8.1/src/Connection.cs.cleanups	2017-07-11 11:05:06.471549634 -0400
+++ dbus-sharp-0.8.1/src/Connection.cs	2017-07-11 11:05:06.472549609 -0400
@@ -27,8 +27,8 @@ namespace DBus
 		Transport transport;
 		bool isConnected = false;
 		bool isShared = false;
-		UUID Id = UUID.Zero;
-		bool isAuthenticated = false;
+		public UUID Id = UUID.Zero;
+		public bool isAuthenticated = false;
 		int serial = 0;
 
 		// STRONG TODO: GET RID OF THAT SHIT
@@ -46,7 +46,7 @@ namespace DBus
 
 		}
 
-		internal Connection (Transport transport)
+		public Connection (Transport transport)
 		{
 			this.transport = transport;
 			transport.Connection = this;
@@ -67,13 +67,13 @@ namespace DBus
 			}
 		}
 
-		internal bool IsAuthenticated {
+		public bool IsAuthenticated {
 			get {
 				return isAuthenticated;
 			}
 		}
 
-		internal Transport Transport {
+		public Transport Transport {
 			get {
 				return transport;
 			} set {
@@ -195,7 +195,7 @@ namespace DBus
 			return pending;
 		}
 
-		internal virtual uint Send (Message msg)
+		public virtual uint Send (Message msg)
 		{
 			if (msg.Header.Serial == 0)
 				msg.Header.Serial = GenerateSerial ();
@@ -224,7 +224,7 @@ namespace DBus
 			DispatchSignals ();
 		}
 
-		internal virtual void HandleMessage (Message msg)
+		public virtual void HandleMessage (Message msg)
 		{
 			if (msg == null)
 				return;
@@ -448,15 +448,15 @@ namespace DBus
 		}
 
 		//these look out of place, but are useful
-		internal protected virtual void AddMatch (string rule)
+		public virtual void AddMatch (string rule)
 		{
 		}
 
-		internal protected virtual void RemoveMatch (string rule)
+		public virtual void RemoveMatch (string rule)
 		{
 		}
 
-		static UUID ReadMachineId (string fname)
+		public static UUID ReadMachineId (string fname)
 		{
 			byte[] data = File.ReadAllBytes (fname);
 			if (data.Length < 33)
diff -up dbus-sharp-0.8.1/src/DProxy.cs.cleanups dbus-sharp-0.8.1/src/DProxy.cs
--- dbus-sharp-0.8.1/src/DProxy.cs.cleanups	2013-07-26 17:04:04.000000000 -0400
+++ dbus-sharp-0.8.1/src/DProxy.cs	2017-07-11 11:05:06.472549609 -0400
@@ -12,7 +12,7 @@ namespace DBus
 	using Protocol;
 
 	//marked internal because this is really an implementation detail and needs to be replaced
-	internal class DProxy : RealProxy
+	public class DProxy : RealProxy
 	{
 		protected BusObject busObject;
 
diff -up dbus-sharp-0.8.1/src/ExportObject.cs.cleanups dbus-sharp-0.8.1/src/ExportObject.cs
--- dbus-sharp-0.8.1/src/ExportObject.cs.cleanups	2017-07-11 11:05:06.467549734 -0400
+++ dbus-sharp-0.8.1/src/ExportObject.cs	2017-07-11 11:14:51.457217114 -0400
@@ -14,28 +14,28 @@ namespace DBus
 {
 	using Protocol;
 
-	internal class PropertyCall {
+	public class PropertyCall {
 		public MethodCaller Get { get; set; }
 		public MethodCaller Set { get; set; }
 		public PropertyInfo MetaData { get; set; }
 	}
 
-	internal class MethodCall {
+	public class MethodCall {
 		public Signature Out { get; set; }
 		public Signature In { get; set; }
 		public MethodCaller Call { get; set; }
 		public MethodInfo MetaData { get; set; }
 	}
 
-	internal class MethodDictionary : Dictionary<string, MethodCall> { }
-	internal class PropertyDictionary : Dictionary<string, PropertyCall> {
+	public class MethodDictionary : Dictionary<string, MethodCall> { }
+	public class PropertyDictionary : Dictionary<string, PropertyCall> {
 		public MethodCaller All { get; set; }
 	}
 
-	internal class InterfaceMethods : Dictionary<string, MethodDictionary> { }
-	internal class InterfaceProperties : Dictionary<string, PropertyDictionary> { }
+	public class InterfaceMethods : Dictionary<string, MethodDictionary> { }
+	public class InterfaceProperties : Dictionary<string, PropertyDictionary> { }
 
-	internal class DBusMemberTable {
+	public class DBusMemberTable {
 
 		public Type ObjectType { get; private set; }
 
@@ -110,7 +110,7 @@ namespace DBus
 	}
 
 	//TODO: perhaps ExportObject should not derive from BusObject
-	internal class ExportObject : BusObject, IDisposable
+	public class ExportObject : BusObject, IDisposable
 	{
 		//maybe add checks to make sure this is not called more than once
 		//it's a bit silly as a property
@@ -207,7 +207,7 @@ namespace DBus
 			IssueReply (method_call, outSig, retWriter, mCaller.MetaData, raisedException);
 		}
 
-		private void IssueReply (MessageContainer method_call, Signature outSig, MessageWriter retWriter, MethodInfo mi, Exception raisedException)
+		public void IssueReply (MessageContainer method_call, Signature outSig, MessageWriter retWriter, MethodInfo mi, Exception raisedException)
 		{
 			Message msg = method_call.Message;
 
@@ -243,7 +243,7 @@ namespace DBus
 			conn.Send (replyMsg);
 		}
 
-		private void HandlePropertyCall (MessageContainer method_call)
+		public void HandlePropertyCall (MessageContainer method_call)
 		{
 			Message msg = method_call.Message;
 			MessageReader msgReader = new MessageReader (msg);
diff -up dbus-sharp-0.8.1/src/Protocol/DValue.cs.cleanups dbus-sharp-0.8.1/src/Protocol/DValue.cs
--- dbus-sharp-0.8.1/src/Protocol/DValue.cs.cleanups	2013-07-26 17:04:04.000000000 -0400
+++ dbus-sharp-0.8.1/src/Protocol/DValue.cs	2017-07-11 11:05:06.473549584 -0400
@@ -9,7 +9,7 @@ using System.IO;
 namespace DBus.Protocol
 {
 	// Allows conversion of complex variants via System.Convert
-	class DValue : IConvertible
+	public class DValue : IConvertible
 	{
 		// TODO: Note that we currently drop the originating Connection/Message details
 		// They may be useful later in conversion!
diff -up dbus-sharp-0.8.1/src/Protocol/ProtocolInformation.cs.cleanups dbus-sharp-0.8.1/src/Protocol/ProtocolInformation.cs
--- dbus-sharp-0.8.1/src/Protocol/ProtocolInformation.cs.cleanups	2013-07-26 17:04:04.000000000 -0400
+++ dbus-sharp-0.8.1/src/Protocol/ProtocolInformation.cs	2017-07-11 11:05:06.473549584 -0400
@@ -7,7 +7,7 @@ using System.Collections.Generic;
 
 namespace DBus.Protocol
 {
-	static class ProtocolInformation
+	public static class ProtocolInformation
 	{
 		//protocol versions that we support
 		public const byte MinVersion = 0;
diff -up dbus-sharp-0.8.1/src/Protocol/Signature.cs.cleanups dbus-sharp-0.8.1/src/Protocol/Signature.cs
--- dbus-sharp-0.8.1/src/Protocol/Signature.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/Protocol/Signature.cs	2017-07-11 11:05:06.473549584 -0400
@@ -194,7 +194,7 @@ namespace DBus.Protocol
 			return sig;
 		}
 
-		internal Signature (DType value)
+		public Signature (DType value)
 		{
 			this.data = DataForDType (value);
 		}
@@ -229,7 +229,7 @@ namespace DBus.Protocol
 			return data;
 		}
 
-		internal DType this[int index]
+		public DType this[int index]
 		{
 			get {
 				return (DType)data[index];
@@ -609,7 +609,7 @@ namespace DBus.Protocol
 		}
 
 		//FIXME: this method is bad, get rid of it
-		internal static DType TypeToDType (Type type)
+		public static DType TypeToDType (Type type)
 		{
 			if (type == typeof (void))
 				return DType.Invalid;
diff -up dbus-sharp-0.8.1/src/Protocol/SocketTransport.cs.cleanups dbus-sharp-0.8.1/src/Protocol/SocketTransport.cs
--- dbus-sharp-0.8.1/src/Protocol/SocketTransport.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/Protocol/SocketTransport.cs	2017-07-11 11:05:06.473549584 -0400
@@ -9,7 +9,7 @@ using System.Net.Sockets;
 
 namespace DBus.Transports
 {
-	class SocketTransport : Transport
+	public class SocketTransport : Transport
 	{
 		internal Socket socket;
 
diff -up dbus-sharp-0.8.1/src/Protocol/Transport.cs.cleanups dbus-sharp-0.8.1/src/Protocol/Transport.cs
--- dbus-sharp-0.8.1/src/Protocol/Transport.cs.cleanups	2014-06-23 23:26:42.000000000 -0400
+++ dbus-sharp-0.8.1/src/Protocol/Transport.cs	2017-07-11 11:05:06.473549584 -0400
@@ -11,7 +11,7 @@ using System.Diagnostics;
 
 namespace DBus.Transports
 {
-	abstract class Transport
+	public abstract class Transport
 	{
 		readonly object writeLock = new object ();
 
@@ -147,7 +147,7 @@ namespace DBus.Transports
 				WakeUp (this, EventArgs.Empty);
 		}
 
-		internal Message ReadMessage ()
+		public Message ReadMessage ()
 		{
 			Message msg;
 
@@ -166,7 +166,7 @@ namespace DBus.Transports
 			return msg;
 		}
 
-		int Read (byte[] buffer, int offset, int count)
+		public int Read (byte[] buffer, int offset, int count)
 		{
 			int read = 0;
 			while (read < count) {
@@ -255,7 +255,7 @@ namespace DBus.Transports
 			return msg;
 		}
 
-		internal virtual void WriteMessage (Message msg)
+		public virtual void WriteMessage (Message msg)
 		{
 			lock (writeLock) {
 				msg.Header.GetHeaderDataToStream (stream);
diff -up dbus-sharp-0.8.1/src/Transports/UnixNativeTransport.cs.cleanups dbus-sharp-0.8.1/src/Transports/UnixNativeTransport.cs
--- dbus-sharp-0.8.1/src/Transports/UnixNativeTransport.cs.cleanups	2013-07-26 17:04:04.000000000 -0400
+++ dbus-sharp-0.8.1/src/Transports/UnixNativeTransport.cs	2017-07-11 11:05:06.473549584 -0400
@@ -16,9 +16,9 @@ using DBus.Protocol;
 
 namespace DBus.Transports
 {
-	class UnixNativeTransport : UnixTransport
+	public class UnixNativeTransport : UnixTransport
 	{
-		internal UnixSocket socket;
+		public UnixSocket socket;
 
 		public override string AuthString ()
 		{
diff -up dbus-sharp-0.8.1/src/Transports/UnixTransport.cs.cleanups dbus-sharp-0.8.1/src/Transports/UnixTransport.cs
--- dbus-sharp-0.8.1/src/Transports/UnixTransport.cs.cleanups	2013-07-26 17:04:04.000000000 -0400
+++ dbus-sharp-0.8.1/src/Transports/UnixTransport.cs	2017-07-11 11:05:06.473549584 -0400
@@ -7,7 +7,7 @@ using System.IO;
 
 namespace DBus.Transports
 {
-	abstract class UnixTransport : Transport
+	public abstract class UnixTransport : Transport
 	{
 		public override void Open (AddressEntry entry)
 		{
diff -up dbus-sharp-0.8.1/src/TypeImplementer.cs.cleanups dbus-sharp-0.8.1/src/TypeImplementer.cs
--- dbus-sharp-0.8.1/src/TypeImplementer.cs.cleanups	2017-07-11 11:05:06.468549709 -0400
+++ dbus-sharp-0.8.1/src/TypeImplementer.cs	2017-07-11 11:05:06.474549559 -0400
@@ -837,5 +837,5 @@ namespace DBus
 
 	internal delegate void TypeWriter<T> (MessageWriter writer, T value);
 
-	internal delegate void MethodCaller (object instance, MessageReader rdr, Message msg, MessageWriter ret);
+	public delegate void MethodCaller (object instance, MessageReader rdr, Message msg, MessageWriter ret);
 }
diff -up dbus-sharp-0.8.1/src/Unix/UnixSocket.cs.cleanups dbus-sharp-0.8.1/src/Unix/UnixSocket.cs
--- dbus-sharp-0.8.1/src/Unix/UnixSocket.cs.cleanups	2013-09-27 11:42:29.000000000 -0400
+++ dbus-sharp-0.8.1/src/Unix/UnixSocket.cs	2017-07-11 11:05:06.474549559 -0400
@@ -16,7 +16,7 @@ namespace DBus.Unix
 	// uid_t: assumed to be 4 bytes
 
 	//[StructLayout(LayoutKind.Sequential, Pack=1)]
-	unsafe struct IOVector
+	public unsafe struct IOVector
 	{
 		public IOVector (IntPtr bbase, int length)
 		{
@@ -38,7 +38,7 @@ namespace DBus.Unix
 		}
 	}
 
-	unsafe class UnixSocket
+	public unsafe class UnixSocket
 	{
 		internal const string LIBC = "libc";
 
diff -up dbus-sharp-0.8.1/src/Unix/UnixStream.cs.cleanups dbus-sharp-0.8.1/src/Unix/UnixStream.cs
--- dbus-sharp-0.8.1/src/Unix/UnixStream.cs.cleanups	2013-09-27 11:42:29.000000000 -0400
+++ dbus-sharp-0.8.1/src/Unix/UnixStream.cs	2017-07-11 11:05:06.474549559 -0400
@@ -15,7 +15,7 @@ namespace DBus.Unix
 	// socklen_t: assumed to be 4 bytes
 	// uid_t: assumed to be 4 bytes
 
-	sealed class UnixStream : Stream //, IDisposable
+	public sealed class UnixStream : Stream //, IDisposable
 	{
 		public readonly UnixSocket usock;
 
