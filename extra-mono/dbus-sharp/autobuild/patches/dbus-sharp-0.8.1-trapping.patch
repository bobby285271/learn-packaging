diff -up dbus-sharp-0.8.1/src/Connection.cs.trapping dbus-sharp-0.8.1/src/Connection.cs
--- dbus-sharp-0.8.1/src/Connection.cs.trapping	2017-07-19 12:50:01.054734991 -0400
+++ dbus-sharp-0.8.1/src/Connection.cs	2017-07-19 12:53:12.705219583 -0400
@@ -35,6 +35,7 @@ namespace DBus
 		internal Thread mainThread = Thread.CurrentThread;
 
 		Dictionary<uint,PendingCall> pendingCalls = new Dictionary<uint,PendingCall> ();
+
 		Queue<Message> inbound = new Queue<Message> ();
 		Dictionary<ObjectPath,BusObject> registeredObjects = new Dictionary<ObjectPath,BusObject> ();
 
@@ -208,6 +209,24 @@ namespace DBus
 		//temporary hack
 		internal void DispatchSignals ()
 		{
+			lock (delayed_signals)
+			lock (delayed_signals_recycle) {
+				if (trap_signals_flush) {
+					delayed_signals.Clear ();
+					delayed_signals_recycle.Clear ();
+					trap_signals_flush = false;
+				} else {
+					while (delayed_signals.Count != 0) {
+						Message msg = delayed_signals.Dequeue ();
+						HandleSignal (msg);
+					}
+
+					while (delayed_signals_recycle.Count != 0) {
+						delayed_signals.Enqueue (delayed_signals_recycle.Dequeue ());
+					}
+				}
+			}
+
 			lock (inbound) {
 				while (inbound.Count != 0) {
 					Message msg = inbound.Dequeue ();
@@ -284,6 +303,23 @@ namespace DBus
 			}
 		}
 
+		private Queue<Message> delayed_signals = new Queue<Message> ();
+		private Queue<Message> delayed_signals_recycle = new Queue<Message> ();
+		private int trap_signals_ref;
+		private bool trap_signals_flush;
+
+		public void TrapSignals ()
+		{
+			Interlocked.Increment (ref trap_signals_ref);
+		}
+
+		public void UntrapSignals ()
+		{
+			if (Interlocked.Decrement (ref trap_signals_ref) == 0) {
+				trap_signals_flush = true;
+			}
+		}
+
 		//this might need reworking with MulticastDelegate
 		internal void HandleSignal (Message msg)
 		{
@@ -320,6 +356,12 @@ namespace DBus
 				//TODO: how should we handle this condition? sending an Error may not be appropriate in this case
 				if (ProtocolInformation.Verbose)
 					Console.Error.WriteLine ("Warning: No signal handler for " + signal.Member);
+
+				if (trap_signals_ref > 0) {
+					lock (delayed_signals_recycle) {
+						delayed_signals_recycle.Enqueue (msg);
+					}
+				}
 			}
 		}
 
